# scheduler/scheduler.py
import asyncio
import sys
from datetime import datetime, time, timedelta
from pathlib import Path

from common.logging_config import setup_logger
from main_tg_bot.booking_objects import PROJECT_ROOT
from common.config import Config

logger = setup_logger("simple_scheduler")
SCHEDULER_DIR = PROJECT_ROOT


class AsyncScheduler:
    def __init__(self):
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á:
        # - interval: –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
        # - daily_at: –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç "HH:MM")
        self.jobs = [
            {
                "name": "notifications_service",
                "script": SCHEDULER_DIR / Config.SCHEDULER_DATA_DIR / "notification_service.py",
                "daily_at": "14:00"
            },
            # –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):
            # {
            #     "name": "sync",
            #     "script": SCHEDULER_DIR / "main_tg_bot" / "google_sheets" / "sync.py",
            #     "interval": 60 * 60  # —Ä–∞–∑ –≤ —á–∞—Å
            # },
            # –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å—é–¥–∞ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞
        ]

    async def run_script(self, script_path: Path):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        if not script_path.exists():
            logger.error(f"Script not found: {script_path}")
            return

        logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] Starting: {script_path}")
        try:
            process = await asyncio.create_subprocess_exec(
                sys.executable, str(script_path),
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()

            if process.returncode == 0:
                logger.info(f"‚úÖ Finished: {script_path}")
            else:
                logger.error(f"‚ùå Failed: {script_path}\n{stderr.decode().strip()}")
        except Exception as e:
            logger.exception(f"üí• Crash while running: {script_path} ‚Äî {e}")

    async def wait_until_next_run(self, target_time_str: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM'"""
        now = datetime.now()
        try:
            hour, minute = map(int, target_time_str.split(":"))
            target_time = time(hour=hour, minute=minute)
        except ValueError:
            logger.error(f"Invalid time format in 'daily_at': {target_time_str}. Expected 'HH:MM'")
            return 24 * 3600  # fallback: –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏

        next_run = datetime.combine(now.date(), target_time)
        if now >= next_run:
            next_run += timedelta(days=1)

        seconds_to_wait = (next_run - now).total_seconds()
        return max(0.0, seconds_to_wait)

    async def run_daily_job(self, job: dict):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        script_path = job["script"]
        target_time_str = job["daily_at"]
        job_name = job["name"]

        while True:
            seconds = await self.wait_until_next_run(target_time_str)
            logger.info(f"üïí '{job_name}' scheduled for {target_time_str}. Waiting {int(seconds)} seconds...")
            await asyncio.sleep(seconds)
            await self.run_script(script_path)

    async def run_interval_job(self, job: dict):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"""
        script_path = job["script"]
        interval = job["interval"]
        job_name = job["name"]

        while True:
            await self.run_script(script_path)
            logger.info(f"üïí '{job_name}' will run again in {interval} seconds")
            await asyncio.sleep(interval)

    async def run_job(self, job: dict):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ü–∏–∫–ª"""
        job_name = job.get("name", "unnamed")
        if "daily_at" in job:
            logger.info(f"üìÖ Job '{job_name}' configured for daily execution at {job['daily_at']}")
            await self.run_daily_job(job)
        elif "interval" in job:
            logger.info(f"üîÅ Job '{job_name}' configured with interval {job['interval']} seconds")
            await self.run_interval_job(job)
        else:
            logger.error(f"Job '{job_name}' has no valid schedule: missing 'interval' or 'daily_at'")

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        logger.info("üöÄ Async scheduler started")
        tasks = [self.run_job(job) for job in self.jobs]
        await asyncio.gather(*tasks)