# ssl_generator.py
import os
import subprocess
import sys
from pathlib import Path


def generate_ssl_certificates_force():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
    try:
        cert_file = "lapkabookink.com+3.pem"
        key_file = "lapkabookink.com+3-key.pem"

        # –ï—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if os.path.exists(cert_file) and os.path.exists(key_file):
            print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            return True

        print("üîê –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")

        # –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º mkcert –≤ PATH
        mkcert_paths = [
            "mkcert",
            "mkcert.exe",
            r"C:\Program Files\mkcert\mkcert.exe",
            r"C:\Windows\System32\mkcert.exe"
        ]

        mkcert_found = None
        for mkcert_cmd in mkcert_paths:
            try:
                result = subprocess.run([mkcert_cmd, "--version"],
                                        capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    mkcert_found = mkcert_cmd
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω mkcert: {mkcert_cmd}")
                    break
            except (FileNotFoundError, subprocess.TimeoutExpired):
                continue

        if mkcert_found:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ mkcert
            cmd = [mkcert_found, 'lapkabookink.com', 'localhost', '127.0.0.1', '::1']
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.getcwd())

            if result.returncode == 0:
                print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ mkcert")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ mkcert: {result.stderr}")

        # –°–ø–æ—Å–æ–± 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º openssl –µ—Å–ª–∏ mkcert –Ω–µ –Ω–∞–π–¥–µ–Ω
        print("üîÑ mkcert –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ OpenSSL...")
        return generate_self_signed_cert()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        return generate_self_signed_cert()


def generate_self_signed_cert():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ OpenSSL"""
    try:
        cert_file = "lapkabookink.com+3.pem"
        key_file = "lapkabookink.com+3-key.pem"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenSSL
        try:
            subprocess.run(["openssl", "version"], capture_output=True, check=True)
        except (FileNotFoundError, subprocess.CalledProcessError):
            print("‚ùå OpenSSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenSSL –∏–ª–∏ mkcert")
            return False

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        key_cmd = [
            "openssl", "genrsa", "-out", key_file, "2048"
        ]
        subprocess.run(key_cmd, check=True, cwd=os.getcwd())

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        config_content = f"""
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no

[req_distinguished_name]
C = RU
ST = Moscow
L = Moscow
O = LapkaBooking
OU = IT Department
CN = lapkabookink.com

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = lapkabookink.com
DNS.2 = localhost
DNS.3 = www.lapkabookink.com
IP.1 = 127.0.0.1
IP.2 = ::1
"""

        config_file = "ssl_config.cnf"
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_content)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        cert_cmd = [
            "openssl", "req", "-new", "-x509", "-key", key_file,
            "-out", cert_file, "-days", "365", "-config", config_file
        ]
        subprocess.run(cert_cmd, check=True, cwd=os.getcwd())

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        if os.path.exists(config_file):
            os.remove(config_file)

        print("‚úÖ –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ OpenSSL")
        print("‚ö†Ô∏è  –ë—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return False


def check_ssl_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è SSL —Ñ–∞–π–ª–æ–≤"""
    cert_file = "lapkabookink.com+3.pem"
    key_file = "lapkabookink.com+3-key.pem"

    if os.path.exists(cert_file) and os.path.exists(key_file):
        print(f"‚úÖ SSL —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã: {cert_file}, {key_file}")
        return True
    else:
        print(f"‚ùå SSL —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {cert_file}, {key_file}")
        return False


if __name__ == "__main__":
    generate_ssl_certificates_force()