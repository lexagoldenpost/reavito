# web_app_server.py
from flask import Flask, render_template, request, jsonify
import os
import threading
import time
import ssl
import subprocess
import sys

app = Flask(__name__, template_folder='html')


# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    return response


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
web_app_public_url = None
web_server_thread = None
web_server_ready = False
web_server_started_event = threading.Event()


@app.route('/booking-form')
def booking_form():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    object_id = request.args.get('object', '')
    user_id = request.args.get('user_id', '')

    return render_template('booking_form.html',
                           object_id=object_id,
                           user_id=user_id)


@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({"status": "ready"})


def is_mkcert_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ mkcert –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        result = subprocess.run(['mkcert', '-version'],
                                capture_output=True, text=True, timeout=5)
        return result.returncode == 0
    except (subprocess.TimeoutExpired, FileNotFoundError, OSError):
        return False


def setup_mkcert_ssl():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º mkcert —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å mkcert
        if not is_mkcert_available():
            print("‚ùå mkcert –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            print_mkcert_installation_instructions()
            return None

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã mkcert
        cert_files = [
            "localhost+2.pem",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è –æ—Ç mkcert
            "localhost.pem",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è
        ]

        key_files = [
            "localhost+2-key.pem",
            "localhost-key.pem",
        ]

        cert_path = None
        key_path = None

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        for cert_file in cert_files:
            potential_cert = os.path.join(current_dir, cert_file)
            if os.path.exists(potential_cert):
                cert_path = potential_cert
                break

        for key_file in key_files:
            potential_key = os.path.join(current_dir, key_file)
            if os.path.exists(potential_key):
                key_path = potential_key
                break

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ mkcert
        if not cert_path or not key_path:
            print("üîç –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã mkcert –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ...")
            if not generate_mkcert_certificates():
                return None
            # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞
            cert_path = os.path.join(current_dir, "localhost+2.pem")
            key_path = os.path.join(current_dir, "localhost+2-key.pem")

        if not os.path.exists(cert_path) or not os.path.exists(key_path):
            print("‚ùå –§–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return None

        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã mkcert:")
        print(f"   Cert: {os.path.basename(cert_path)}")
        print(f"   Key: {os.path.basename(key_path)}")

        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain(cert_path, key_path)
        print("‚úÖ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return context

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL —Å mkcert: {e}")
        import traceback
        traceback.print_exc()
        return None


def generate_mkcert_certificates():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ mkcert"""
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))

        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ mkcert...")

        # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CA
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Certificate Authority...")
        ca_result = subprocess.run(['mkcert', '-install'],
                                   capture_output=True, text=True, cwd=current_dir)

        if ca_result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ CA: {ca_result.stderr}")
            return False

        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π CA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è localhost
        print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è localhost...")
        cert_result = subprocess.run(['mkcert', 'localhost', '127.0.0.1', '::1'],
                                     capture_output=True, text=True, cwd=current_dir)

        if cert_result.returncode == 0:
            print("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
            print(cert_result.stdout)
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {cert_result.stderr}")
            return False

    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å mkcert: {e}")
        return False


def print_mkcert_installation_instructions():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ mkcert"""
    print("\n" + "=" * 60)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï MKCert")
    print("=" * 60)
    print("–î–ª—è —Ä–∞–±–æ—Ç—ã Telegram Web App —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ mkcert –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:")
    print()
    print("ü™ü Windows:")
    print("   1. –°–∫–∞—á–∞–π—Ç–µ —Å https://github.com/FiloSottile/mkcert/releases")
    print("   2. –ò–ª–∏ —á–µ—Ä–µ–∑ Chocolatey: choco install mkcert")
    print()
    print("üçé macOS:")
    print("   brew install mkcert")
    print()
    print("üêß Linux (Ubuntu/Debian):")
    print("   sudo apt install libnss3-tools")
    print("   wget https://github.com/FiloSottile/mkcert/releases/latest/download/mkcert-v1.4.4-linux-amd64")
    print("   chmod +x mkcert-v1.4.4-linux-amd64")
    print("   sudo mv mkcert-v1.4.4-linux-amd64 /usr/local/bin/mkcert")
    print()
    print("–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
    print("=" * 60 + "\n")


def create_fallback_ssl():
    """–°–æ–∑–¥–∞–Ω–∏–µ fallback SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ mkcert"""
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        cert_file = os.path.join(current_dir, "cert.pem")
        key_file = os.path.join(current_dir, "key.pem")

        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å Python
        import tempfile
        import atexit

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        from cryptography import x509
        from cryptography.x509.oid import NameOID
        from cryptography.hazmat.primitives import hashes, serialization
        from cryptography.hazmat.primitives.asymmetric import rsa
        from datetime import datetime, timedelta

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
        )

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        subject = issuer = x509.Name([
            x509.NameAttribute(NameOID.COUNTRY_NAME, "US"),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, "Booking Bot"),
            x509.NameAttribute(NameOID.COMMON_NAME, "localhost"),
        ])

        cert = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            issuer
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            datetime.utcnow()
        ).not_valid_after(
            datetime.utcnow() + timedelta(days=365)
        ).sign(private_key, hashes.SHA256())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
        with open(key_file, "wb") as f:
            f.write(private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.TraditionalOpenSSL,
                encryption_algorithm=serialization.NoEncryption(),
            ))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        with open(cert_file, "wb") as f:
            f.write(cert.public_bytes(serialization.Encoding.PEM))

        print("‚úÖ –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain(cert_file, key_file)
        return context

    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install cryptography")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
        return None


def run_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    global web_app_public_url, web_server_ready

    try:
        print("–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ HTTPS –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")

        # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ mkcert, –ø–æ—Ç–æ–º fallback
        ssl_context = setup_mkcert_ssl()
        if ssl_context is None:
            print("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...")
            ssl_context = create_fallback_ssl()

        if ssl_context is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL, –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ HTTPS...")
            web_app_public_url = "http://localhost:5000"
            web_server_ready = True
            web_server_started_event.set()

            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ –±–µ–∑ HTTPS!")
            print("   Telegram Web App —Ç—Ä–µ–±—É–µ—Ç HTTPS –¥–ª—è —Ä–∞–±–æ—Ç—ã!")
            print("   –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Web App –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞!")

            app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)
        else:
            web_app_public_url = "https://localhost:5000"
            web_server_ready = True
            web_server_started_event.set()

            print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: {web_app_public_url}")
            print("üîí –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")

            app.run(
                host='0.0.0.0',
                port=5000,
                debug=False,
                use_reloader=False,
                ssl_context=ssl_context
            )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        web_server_ready = False
        web_server_started_event.set()


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
    global web_server_thread, web_server_ready, web_server_started_event

    if web_server_thread is None or not web_server_thread.is_alive():
        web_server_ready = False
        web_server_started_event.clear()
        web_server_thread = threading.Thread(target=run_web_server, daemon=True)
        web_server_thread.start()

        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        max_wait_time = 30
        server_ready = web_server_started_event.wait(timeout=max_wait_time)

        if server_ready and web_server_ready and web_app_public_url:
            print(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: {web_app_public_url}")
            return web_app_public_url
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            return None
    else:
        print("‚ÑπÔ∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return web_app_public_url


def stop_web_server():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    global web_server_ready, web_server_started_event
    try:
        web_server_ready = False
        web_server_started_event.clear()
        print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")


def get_web_app_url():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è Web App"""
    global web_app_public_url, web_server_ready

    if web_server_ready and web_app_public_url:
        return web_app_public_url
    else:
        raise Exception("Web server not ready")


def wait_for_web_server(timeout=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    return web_server_started_event.wait(timeout=timeout)