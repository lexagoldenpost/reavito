# web_app_server.py
from flask import Flask, render_template, request, jsonify
import os
import threading
import time
import ssl

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SSL
from ssl_generator import generate_ssl_certificates_force, check_ssl_files

app = Flask(__name__, template_folder='html')


# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    return response


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
web_app_public_url = None
web_server_thread = None
web_server_ready = False
web_server_started_event = threading.Event()


@app.route('/booking-form')
def booking_form():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    object_id = request.args.get('object', '')
    user_id = request.args.get('user_id', '')

    return render_template('booking_form.html',
                           object_id=object_id,
                           user_id=user_id)


@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({"status": "ready"})


def run_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º HTTPS"""
    global web_app_public_url, web_server_ready

    try:
        print("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ HTTPS —Å–µ—Ä–≤–µ—Ä–∞...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not generate_ssl_certificates_force():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
            web_server_ready = False
            web_server_started_event.set()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not check_ssl_files():
            print("‚ùå SSL —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            web_server_ready = False
            web_server_started_event.set()
            return

        # –ü—É—Ç–∏ –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
        ssl_cert = "lapkabookink.com+3.pem"
        ssl_key = "lapkabookink.com+3-key.pem"

        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        ssl_context.load_cert_chain(ssl_cert, ssl_key)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        web_app_public_url = f"https://lapkabookink.com:5000"
        web_server_ready = True
        web_server_started_event.set()

        print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π HTTPS —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω: {web_app_public_url}")
        print("ü§ñ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Web App –≤ Telegram!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä —Å HTTPS
        app.run(
            host='lapkabookink.com',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
            port=5000,
            debug=False,
            use_reloader=False,
            ssl_context=ssl_context
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        web_server_ready = False
        web_server_started_event.set()


def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
    global web_server_thread, web_server_ready, web_server_started_event

    if web_server_thread is None or not web_server_thread.is_alive():
        web_server_ready = False
        web_server_started_event.clear()
        web_server_thread = threading.Thread(target=run_web_server, daemon=True)
        web_server_thread.start()

        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        max_wait_time = 30
        server_ready = web_server_started_event.wait(timeout=max_wait_time)

        if server_ready and web_server_ready and web_app_public_url:
            print(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: {web_app_public_url}")
            return web_app_public_url
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            return None
    else:
        print("‚ÑπÔ∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return web_app_public_url


def stop_web_server():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    global web_server_ready, web_server_started_event
    try:
        web_server_ready = False
        web_server_started_event.clear()
        print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")


def get_web_app_url():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è Web App"""
    global web_app_public_url, web_server_ready

    if web_server_ready and web_app_public_url:
        return web_app_public_url
    else:
        raise Exception("Web server not ready")


def wait_for_web_server(timeout=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    return web_server_started_event.wait(timeout=timeout)