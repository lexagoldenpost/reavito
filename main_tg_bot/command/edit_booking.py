# edit_booking.py

import uuid
from datetime import datetime
import pandas as pd
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)

from common.logging_config import setup_logger
from main_tg_bot.booking_objects import BOOKING_SHEETS, get_booking_sheet
from main_tg_bot.google_sheets.sync_manager import GoogleSheetsCSVSync  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

logger = setup_logger("edit_booking")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_SHEET, SELECT_BOOKING, EDIT_FIELD, EDIT_VALUE = range(4)


class EditBookingHandler:
    def __init__(self, bot):
        self.bot = bot
        self.sync_manager = GoogleSheetsCSVSync()  # ‚Üê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞

    def get_conversation_handler(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler"""
        return ConversationHandler(
            entry_points=[CommandHandler('edit_booking', self.edit_booking_start)],
            states={
                SELECT_SHEET: [CallbackQueryHandler(self.select_sheet, pattern="^sheet_")],
                SELECT_BOOKING: [
                    CallbackQueryHandler(self.select_booking, pattern="^booking_"),
                    CallbackQueryHandler(self.cancel_edit, pattern="^back_to_sheets")
                ],
                EDIT_FIELD: [
                    CallbackQueryHandler(self.select_field_to_edit, pattern="^edit_"),
                    CallbackQueryHandler(self.save_booking, pattern="^save_booking"),
                    CallbackQueryHandler(self.cancel_edit, pattern="^cancel_edit"),
                    CallbackQueryHandler(self.select_sheet, pattern="^back_to_bookings")
                ],
                EDIT_VALUE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.edit_field_value)
                ]
            },
            fallbacks=[CommandHandler('cancel', self.cancel_edit)],
            allow_reentry=True
        )

    def format_booking_data(self, booking_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        try:
            nights = 0
            if booking_data.get('–ó–∞–µ–∑–¥') and booking_data.get('–í—ã–µ–∑–¥'):
                try:
                    check_in = datetime.strptime(booking_data['–ó–∞–µ–∑–¥'], "%d.%m.%Y").date()
                    check_out = datetime.strptime(booking_data['–í—ã–µ–∑–¥'], "%d.%m.%Y").date()
                    nights = (check_out - check_in).days
                except ValueError:
                    nights = 0

            message = (
                f"üìã –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
                f"‚Ä¢ –û–±—ä–µ–∫—Ç: {booking_data.get('sheet_name', 'N/A')}\n"
                f"‚Ä¢ –ì–æ—Å—Ç—å: {booking_data.get('–ì–æ—Å—Ç—å', 'N/A')}\n"
                f"‚Ä¢ –î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking_data.get('–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'N/A')}\n"
                f"‚Ä¢ –ó–∞–µ–∑–¥: {booking_data.get('–ó–∞–µ–∑–¥', 'N/A')}\n"
                f"‚Ä¢ –í—ã–µ–∑–¥: {booking_data.get('–í—ã–µ–∑–¥', 'N/A')}\n"
                f"‚Ä¢ –ù–æ—á–µ–π: {nights}\n"
                f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {booking_data.get('–°—É–º–º–∞–ë–∞—Ç—Ç—ã', 'N/A')}\n"
                f"‚Ä¢ –ê–≤–∞–Ω—Å: {booking_data.get('–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏', 'N/A')}\n"
                f"‚Ä¢ –î–æ–ø–ª–∞—Ç–∞: {booking_data.get('–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏', 'N/A')}\n"
                f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {booking_data.get('–ò—Å—Ç–æ—á–Ω–∏–∫', 'N/A')}\n"
                f"‚Ä¢ –î–æ–ø. –ø–ª–∞—Ç–µ–∂–∏: {booking_data.get('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã', 'N/A')}\n"
                f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {booking_data.get('–†–∞—Å—Ö–æ–¥—ã', 'N/A')}\n"
                f"‚Ä¢ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {booking_data.get('–û–ø–ª–∞—Ç–∞', 'N/A')}\n"
                f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking_data.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'N/A')}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {booking_data.get('—Ç–µ–ª–µ—Ñ–æ–Ω', 'N/A')}\n"
                f"‚Ä¢ –î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω: {booking_data.get('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', 'N/A')}\n"
                f"‚Ä¢ –†–µ–π—Å—ã: {booking_data.get('–†–µ–π—Å—ã', 'N/A')}\n"
                f"‚Ä¢ ID: {booking_data.get('_sync_id', 'N/A')}"
            )
            return message
        except Exception as e:
            logger.error(f"Error formatting booking data: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"

    async def edit_booking_start(self, update: Update, context: CallbackContext) -> int:
        try:
            if not BOOKING_SHEETS:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return ConversationHandler.END

            keyboard = [
                [InlineKeyboardButton(sheet_name, callback_data=f"sheet_{sheet_name}")]
                for sheet_name in BOOKING_SHEETS.keys()
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return SELECT_SHEET

        except Exception as e:
            logger.error(f"Error in edit_booking_start: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return ConversationHandler.END

    async def select_sheet(self, update: Update, context: CallbackContext) -> int:
        try:
            query = update.callback_query
            await query.answer()

            if query.data == "back_to_sheets":
                return await self.edit_booking_start(update, context)

            sheet_name = query.data.replace("sheet_", "")
            booking_sheet = get_booking_sheet(sheet_name)

            if not booking_sheet:
                await query.edit_message_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return ConversationHandler.END

            df = booking_sheet.load()

            if df.empty:
                await query.edit_message_text("‚ùå –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.")
                return ConversationHandler.END

            context.user_data['edit_booking'] = {
                'sheet_name': sheet_name,
                'booking_sheet': booking_sheet,
                'dataframe': df
            }

            keyboard = []
            for idx, row in df.iterrows():
                guest = row.get('–ì–æ—Å—Ç—å', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                check_in = row.get('–ó–∞–µ–∑–¥', 'N/A')
                check_out = row.get('–í—ã–µ–∑–¥', 'N/A')
                sync_id = row.get('_sync_id', str(idx))

                keyboard.append([InlineKeyboardButton(
                    f"üè† {guest} ({check_in} - {check_out})",
                    callback_data=f"booking_{sync_id}"
                )])

            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_sheets")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"üìù –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {sheet_name}:",
                reply_markup=reply_markup
            )
            return SELECT_BOOKING

        except Exception as e:
            logger.error(f"Error in select_sheet: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return ConversationHandler.END

    async def select_booking(self, update: Update, context: CallbackContext) -> int:
        try:
            query = update.callback_query
            await query.answer()

            if query.data == "back_to_bookings":
                return await self.select_sheet(update, context)

            sync_id = query.data.replace("booking_", "")
            user_data = context.user_data['edit_booking']
            df = user_data['dataframe']

            if '_sync_id' in df.columns:
                booking_row = df[df['_sync_id'] == sync_id]
            else:
                try:
                    idx = int(sync_id)
                    booking_row = df.iloc[[idx]]
                except (ValueError, IndexError):
                    await query.edit_message_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                    return ConversationHandler.END

            if booking_row.empty:
                await query.edit_message_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return ConversationHandler.END

            booking_data = booking_row.iloc[0].to_dict()
            booking_data['sheet_name'] = user_data['sheet_name']
            booking_data['row_index'] = booking_row.index[0]

            context.user_data['edit_booking']['current_booking'] = booking_data
            context.user_data['edit_booking']['original_data'] = booking_data.copy()

            message = self.format_booking_data(booking_data)
            keyboard = self._create_edit_keyboard(booking_data)
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"{message}\n\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return EDIT_FIELD

        except Exception as e:
            logger.error(f"Error in select_booking: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return ConversationHandler.END

    def _create_edit_keyboard(self, booking_data):
        fields = [
            ("–ì–æ—Å—Ç—å", "guest"),
            ("–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "booking_date"),
            ("–ó–∞–µ–∑–¥", "check_in"),
            ("–í—ã–µ–∑–¥", "check_out"),
            ("–°—É–º–º–∞–ë–∞—Ç—Ç—ã", "total_sum"),
            ("–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏", "advance"),
            ("–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏", "additional_payment"),
            ("–ò—Å—Ç–æ—á–Ω–∏–∫", "source"),
            ("–û–ø–ª–∞—Ç–∞", "payment_method"),
            ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "comment"),
            ("—Ç–µ–ª–µ—Ñ–æ–Ω", "phone"),
            ("–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", "extra_phone"),
            ("–†–µ–π—Å—ã", "flights")
        ]

        keyboard = []
        for field_name, field_key in fields:
            value = booking_data.get(field_name, 'N/A')
            if value and value != 'N/A':
                display_value = str(value)[:20] + "..." if len(str(value)) > 20 else str(value)
                keyboard.append([InlineKeyboardButton(
                    f"‚úèÔ∏è {field_name}: {display_value}",
                    callback_data=f"edit_{field_key}"
                )])

        keyboard.extend([
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="save_booking")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_bookings")]
        ])
        return keyboard

    async def select_field_to_edit(self, update: Update, context: CallbackContext) -> int:
        try:
            query = update.callback_query
            await query.answer()

            if query.data == "back_to_bookings":
                return await self.select_sheet(update, context)
            if query.data == "cancel_edit":
                return await self.cancel_edit(update, context)
            if query.data == "save_booking":
                return await self.save_booking(update, context)

            field_key = query.data.replace("edit_", "")
            context.user_data['edit_booking']['current_field'] = field_key

            field_names = {
                "guest": "–ì–æ—Å—Ç—å",
                "booking_date": "–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)",
                "check_in": "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)",
                "check_out": "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)",
                "total_sum": "–û–±—â–∞—è —Å—É–º–º–∞",
                "advance": "–ê–≤–∞–Ω—Å",
                "additional_payment": "–î–æ–ø–ª–∞—Ç–∞",
                "source": "–ò—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "payment_method": "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                "comment": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "extra_phone": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω",
                "flights": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–∞—Ö"
            }

            booking_data = context.user_data['edit_booking']['current_booking']
            current_value = booking_data.get(field_names.get(field_key, field_key), 'N/A')

            await query.edit_message_text(
                f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_names.get(field_key, field_key)}':\n"
                f"üìå –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n\n"
                f"üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
            )
            return EDIT_VALUE

        except Exception as e:
            logger.error(f"Error in select_field_to_edit: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è.")
            return ConversationHandler.END

    async def edit_field_value(self, update: Update, context: CallbackContext) -> int:
        try:
            new_value = update.message.text.strip()
            field_key = context.user_data['edit_booking']['current_field']
            booking_data = context.user_data['edit_booking']['current_booking']

            field_mapping = {
                "guest": "–ì–æ—Å—Ç—å",
                "booking_date": "–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "check_in": "–ó–∞–µ–∑–¥",
                "check_out": "–í—ã–µ–∑–¥",
                "total_sum": "–°—É–º–º–∞–ë–∞—Ç—Ç—ã",
                "advance": "–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏",
                "additional_payment": "–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏",
                "source": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                "payment_method": "–û–ø–ª–∞—Ç–∞",
                "comment": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "phone": "—Ç–µ–ª–µ—Ñ–æ–Ω",
                "extra_phone": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω",
                "flights": "–†–µ–π—Å—ã"
            }

            csv_field_name = field_mapping.get(field_key, field_key)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
            date_fields = ["booking_date", "check_in", "check_out"]
            if field_key in date_fields:
                try:
                    parsed_date = datetime.strptime(new_value, "%d.%m.%Y").date()
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                    )
                    return EDIT_VALUE

                # üî¥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞
                if field_key in ("check_in", "check_out"):
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã –∏–∑ booking_data
                    current_check_in = booking_data.get("–ó–∞–µ–∑–¥")
                    current_check_out = booking_data.get("–í—ã–µ–∑–¥")

                    if field_key == "check_in":
                        new_check_in = parsed_date
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–ª–∏ –Ω–æ–≤—É—é, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –∑–∞–¥–∞–Ω–∞
                        check_out_str = current_check_out
                    else:  # field_key == "check_out"
                        new_check_out = parsed_date
                        check_out_str = new_value
                        check_in_str = current_check_in

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É –¥–∞—Ç
                    if field_key == "check_in":
                        if current_check_out:
                            try:
                                check_out_date = datetime.strptime(current_check_out, "%d.%m.%Y").date()
                                if check_out_date < new_check_in:
                                    await update.message.reply_text(
                                        "‚ùå –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.\n"
                                        "–°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:"
                                    )
                                    return EDIT_VALUE
                            except ValueError:
                                pass  # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                    elif field_key == "check_out":
                        if current_check_in:
                            try:
                                check_in_date = datetime.strptime(current_check_in, "%d.%m.%Y").date()
                                if new_check_out < check_in_date:
                                    await update.message.reply_text(
                                        "‚ùå –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.\n"
                                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:"
                                    )
                                    return EDIT_VALUE
                            except ValueError:
                                pass

                booking_data[csv_field_name] = new_value
            else:
                booking_data[csv_field_name] = new_value

            context.user_data['edit_booking']['current_booking'] = booking_data
            return await self.show_booking_for_edit(update, context)

        except Exception as e:
            logger.error(f"Error in edit_field_value: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è.")
            return EDIT_VALUE

    async def show_booking_for_edit(self, update: Update, context: CallbackContext) -> int:
        try:
            booking_data = context.user_data['edit_booking']['current_booking']
            message = self.format_booking_data(booking_data)
            keyboard = self._create_edit_keyboard(booking_data)
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"{message}\n\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return EDIT_FIELD

        except Exception as e:
            logger.error(f"Error in show_booking_for_edit: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return ConversationHandler.END

    async def save_booking(self, update: Update, context: CallbackContext) -> int:
        try:
            query = update.callback_query
            await query.answer()

            user_data = context.user_data['edit_booking']
            booking_data = user_data['current_booking']
            original_data = user_data['original_data']
            booking_sheet = user_data['booking_sheet']
            df = user_data['dataframe']
            sheet_name = user_data['sheet_name']

            row_index = booking_data['row_index']

            # üî¥ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
            check_in_str = booking_data.get("–ó–∞–µ–∑–¥")
            check_out_str = booking_data.get("–í—ã–µ–∑–¥")
            if check_in_str and check_out_str:
                try:
                    check_in = datetime.strptime(check_in_str, "%d.%m.%Y").date()
                    check_out = datetime.strptime(check_out_str, "%d.%m.%Y").date()
                    if check_out < check_in:
                        await query.edit_message_text(
                            "‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        )
                        return EDIT_FIELD
                except ValueError:
                    pass

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            for key, value in booking_data.items():
                if key not in ['sheet_name', 'row_index'] and key in df.columns:
                    df.at[row_index, key] = value

            booking_sheet.save(df)

            # üì• –°–æ–æ–±—â–∞–µ–º –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            changes = []
            for key in booking_data.keys():
                if key not in ['sheet_name', 'row_index']:
                    orig = str(original_data.get(key, ''))
                    new = str(booking_data.get(key, ''))
                    if orig != new:
                        changes.append(f"‚Ä¢ {key}: '{orig}' ‚Üí '{new}'")

            if changes:
                changes_text = "\n".join(changes)
                await query.edit_message_text(
                    f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:\n"
                    f"üìÅ {booking_sheet.filename}\n\n"
                    f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n{changes_text}"
                )
            else:
                await query.edit_message_text(
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ):\n"
                    f"üìÅ {booking_sheet.filename}"
                )

            # üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            sync_success = self.sync_manager.sync_sheet(sheet_name, direction='csv_to_google')

            # üì§ –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if sync_success:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Google –¢–∞–±–ª–∏—Ü–µ–π!"
                )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google –¢–∞–±–ª–∏—Ü–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å.\n"
                         "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–∑–∂–µ."
                )

            if 'edit_booking' in context.user_data:
                del context.user_data['edit_booking']

            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error in save_booking: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            return ConversationHandler.END

    async def cancel_edit(self, update: Update, context: CallbackContext) -> int:
        try:
            query = update.callback_query
            if query:
                await query.answer()
                await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            else:
                await update.message.reply_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

            if 'edit_booking' in context.user_data:
                del context.user_data['edit_booking']

            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error in cancel_edit: {e}")
            if update.message:
                await update.message.reply_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END