# add_booking_form.py
import csv
import json
import os
import uuid
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse

from booking_objects import get_booking_sheet
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

from common.config import Config
from common.logging_config import setup_logger

logger = setup_logger("add_booking")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_OBJECT, FILLING_FORM = range(2)


class AddBookingHandler:
    def __init__(self, bot_instance=None):
        self.bot = bot_instance
        # URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å —Ñ–æ—Ä–º–æ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.remote_web_app_url = Config.REMOTE_WEB_APP_URL + Config.REMOTE_WEB_APP_CREATE_BOOKING_URL

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ booking_objects
        self.objects = self._load_objects_from_booking_sheets()

    def _load_objects_from_booking_sheets(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∏–∑ booking_objects"""
        objects = {}
        # –≠—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º, —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ booking_objects.py
        object_mapping = {
            'citygate_p311': 'CityGate P311',
            'citygate_b209': 'CityGate B209',
            'halo_title': 'Halo Title',
            'palmetto_karon': 'Palmetto Karon',
            'title_residence': 'Title Residence',
            'halo_ju701_–¥–≤—É—à–∫–∞': 'Halo JU701 –î–≤—É—à–∫–∞'
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã
        for object_id, object_name in object_mapping.items():
            sheet = get_booking_sheet(object_name)
            if sheet:
                objects[object_id] = object_name
                logger.info(f"Loaded object: {object_id} -> {object_name}")

        return objects

    async def start_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("=== START BOOKING PROCESS ===")
        logger.info(f"User: {update.effective_user.username} (ID: {update.effective_user.id})")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        if self.bot and not await self.bot.check_user_permission(update):
            logger.warning("User permission denied")
            return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
        keyboard = []
        for object_id, object_name in self.objects.items():
            keyboard.append([InlineKeyboardButton(f"üè¢ {object_name}", callback_data=f"object_{object_id}")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üè® *–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        logger.info("Object selection presented to user")
        return SELECTING_OBJECT

    async def select_object(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞"""
        query = update.callback_query
        await query.answer()

        logger.info(f"=== OBJECT SELECTION ===")
        logger.info(f"User: {query.from_user.username} (ID: {query.from_user.id})")
        logger.info(f"Callback data: {query.data}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if self.bot and not await self.bot.check_user_permission(update):
            logger.warning("User permission denied in object selection")
            return ConversationHandler.END

        # –ò–∑–≤–ª–µ–∫–∞–µ–º object_id –∏–∑ callback_data, —É–±–∏—Ä–∞—è –ø—Ä–µ—Ñ–∏–∫—Å "object_"
        callback_data = query.data
        object_id = callback_data.replace("object_", "")

        logger.info(f"Selected object: {object_id}")

        if object_id not in self.objects:
            logger.error(f"Object not found: {object_id}")
            await query.edit_message_text(
                "‚ùå *–û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω*",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

        context.user_data['selected_object'] = object_id
        context.user_data['object_name'] = self.objects.get(object_id, "Unknown Object")

        logger.info(f"Context user_data updated: {context.user_data}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        try:
            if not self.remote_web_app_url:
                raise Exception("Remote web app URL not configured")

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Mini App
            web_app_url = self._build_web_app_url(object_id, query.from_user.id)
            logger.info(f"Generated Mini App URL: {web_app_url}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É —Å URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Telegram Mini App
            keyboard = [
                [InlineKeyboardButton(
                    "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                    url=web_app_url  # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ Mini App –≤–Ω—É—Ç—Ä–∏ Telegram
                )],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="check_saved_data")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"üè¢ *–í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç:* {self.objects[object_id]}\n\n"
                "üìù *–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:*\n\n"
                "_–§–æ—Ä–º–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ Telegram Mini App_\n\n"
                "–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø—è—Ç –≤ –±–æ—Ç–∞.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            logger.info("Mini App button presented to user")
            return FILLING_FORM

        except Exception as e:
            logger.error(f"Error creating Mini App URL: {str(e)}")
            await query.edit_message_text(
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

    def _build_web_app_url(self, object_id: str, user_id: int) -> str:
        """–°—Ç—Ä–æ–∏—Ç URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Telegram Mini App"""

        base_url = self.remote_web_app_url  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "https://ci84606-wordpress-rdeld.tw1.ru/?page_id=8"

        # –†–∞–∑–±–∏—Ä–∞–µ–º URL
        parsed = urlparse(base_url)
        query_params = parse_qs(parsed.query, keep_blank_values=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Mini App
        query_params['object'] = object_id
        query_params['user_id'] = str(user_id)
        query_params['tgWebApp'] = '1'  # –§–ª–∞–≥ —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ –≤ Telegram

        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        new_query = urlencode(query_params, doseq=True)
        new_url = urlunparse((
            parsed.scheme,
            parsed.netloc,
            parsed.path,
            parsed.params,
            new_query,
            parsed.fragment
        ))

        return new_url

    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
        logger.info(">>> handle_web_app_data CALLED")

        try:
            web_app_data = update.message.web_app_data
            data = json.loads(web_app_data.data)
            logger.info(f"Mini App data received: {json.dumps(data, indent=2, ensure_ascii=False)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
            json_save_success = data.get('json_save_success', False)

            if json_save_success:
                logger.info("‚úÖ Booking successfully saved to JSON file on remote server")
                logger.info(f"JSON save message: {data.get('json_save_message', 'No message')}")
                logger.info(f"Booking ID: {data.get('booking_id', 'No ID')}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π CSV
                success = await self.save_booking_to_local_storage(data, context)

                if success:
                    logger.info("‚úÖ Data successfully saved to local storage")
                    await update.message.reply_text(
                        "‚úÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*\n\n"
                        f"üè¢ *–û–±—ä–µ–∫—Ç:* {data.get('object_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üë§ *–ì–æ—Å—Ç—å:* {data.get('guest_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üìÖ *–ó–∞–µ–∑–¥:* {data.get('check_in', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üìÖ *–í—ã–µ–∑–¥:* {data.get('check_out', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üåô *–ù–æ—á–µ–π:* {data.get('nights_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üí∞ *–°—É–º–º–∞:* {data.get('total_baht', '0')} –±–∞—Ç—Ç",
                        parse_mode='Markdown'
                    )
                else:
                    logger.error("Failed to save booking to local storage")
                    await update.message.reply_text(
                        "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É*\n\n"
                        "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞.",
                        parse_mode='Markdown'
                    )
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                success = await self.save_booking_to_local_storage(data, context)
                if success:
                    logger.info("Booking saved directly to local storage")
                    await update.message.reply_text(
                        "‚úÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É!*",
                        parse_mode='Markdown'
                    )
                else:
                    logger.error("Failed to save booking")
                    await update.message.reply_text(
                        "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*",
                        parse_mode='Markdown'
                    )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self._send_admin_notification(data, context)

        except Exception as e:
            logger.error(f"Error processing Mini App data: {str(e)}")
            await update.message.reply_text(
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode='Markdown'
            )

        return ConversationHandler.END

    async def save_booking_to_local_storage(self, booking_data: dict, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (CSV)"""
        try:
            object_id = booking_data.get('object_id')
            if not object_id:
                logger.error("No object_id in booking data")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CSV —Ñ–∞–π–ª –∏–∑ booking_objects
            object_name = self.objects.get(object_id)
            if not object_name:
                logger.error(f"Object name not found for ID: {object_id}")
                return False

            booking_sheet = get_booking_sheet(object_name)
            if not booking_sheet:
                logger.error(f"Booking sheet not found for: {object_name}")
                return False

            csv_file = booking_sheet.filepath
            logger.info(f"Saving to CSV file: {csv_file}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            file_exists = os.path.isfile(csv_file)

            with open(csv_file, 'a', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    '–ì–æ—Å—Ç—å', '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π',
                    '–°—É–º–º–∞–ë–∞—Ç—Ç—ã', '–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏', '–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏', '–ò—Å—Ç–æ—á–Ω–∏–∫',
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã', '–†–∞—Å—Ö–æ–¥—ã', '–û–ø–ª–∞—Ç–∞', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '—Ç–µ–ª–µ—Ñ–æ–Ω',
                    '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', '–†–µ–π—Å—ã', '_sync_id'
                ]

                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                if not file_exists:
                    writer.writeheader()
                    logger.info("CSV file created with headers")

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ CSV
                row_data = {
                    '–ì–æ—Å—Ç—å': booking_data.get('guest_name', ''),
                    '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è': booking_data.get('booking_date', ''),
                    '–ó–∞–µ–∑–¥': booking_data.get('check_in', ''),
                    '–í—ã–µ–∑–¥': booking_data.get('check_out', ''),
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π': booking_data.get('nights_count', ''),
                    '–°—É–º–º–∞–ë–∞—Ç—Ç—ã': booking_data.get('total_baht', ''),
                    '–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏': booking_data.get('advance_payment', ''),
                    '–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏': booking_data.get('additional_payment', ''),
                    '–ò—Å—Ç–æ—á–Ω–∏–∫': booking_data.get('source', ''),
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã': '',
                    '–†–∞—Å—Ö–æ–¥—ã': '',
                    '–û–ø–ª–∞—Ç–∞': booking_data.get('payment_method', ''),
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': booking_data.get('comment', ''),
                    '—Ç–µ–ª–µ—Ñ–æ–Ω': booking_data.get('phone', ''),
                    '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω': booking_data.get('additional_phone', ''),
                    '–†–µ–π—Å—ã': booking_data.get('flights', ''),
                    '_sync_id': booking_data.get('sync_id', booking_data.get('id', str(uuid.uuid4())))
                }

                writer.writerow(row_data)
                logger.info(f"‚úÖ Booking successfully saved to CSV: {csv_file}")

                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                logger.info("=== BOOKING SUCCESSFULLY SAVED ===")
                logger.info(f"Object: {object_name}")
                logger.info(f"Guest: {booking_data.get('guest_name')}")
                logger.info(f"Check-in: {booking_data.get('check_in')}")
                logger.info(f"Check-out: {booking_data.get('check_out')}")
                logger.info(f"Total: {booking_data.get('total_baht')} baht")

                return True

        except Exception as e:
            logger.error(f"Error saving booking to local storage: {str(e)}")
            return False

    async def check_saved_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query
        await query.answer()

        try:
            object_id = context.user_data.get('selected_object')
            if not object_id:
                await query.edit_message_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
                return FILLING_FORM

            object_name = self.objects.get(object_id)
            booking_sheet = get_booking_sheet(object_name)

            if booking_sheet and booking_sheet.exists():
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ CSV
                import pandas as pd
                df = booking_sheet.load()
                if not df.empty:
                    last_bookings = df.tail(3)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

                    message = f"üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {object_name}:*\n\n"
                    for _, booking in last_bookings.iterrows():
                        message += f"üë§ {booking.get('–ì–æ—Å—Ç—å', 'N/A')}\n"
                        message += f"üìÖ {booking.get('–ó–∞–µ–∑–¥', 'N/A')} - {booking.get('–í—ã–µ–∑–¥', 'N/A')}\n"
                        message += f"üí∞ {booking.get('–°—É–º–º–∞–ë–∞—Ç—Ç—ã', 'N/A')} –±–∞—Ç—Ç\n"
                        message += "‚îÄ" * 20 + "\n"

                    await query.edit_message_text(message, parse_mode='Markdown')
                else:
                    await query.edit_message_text("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            else:
                await query.edit_message_text("üì≠ –§–∞–π–ª —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            logger.error(f"Error checking saved data: {str(e)}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö")

        return FILLING_FORM

    async def _send_admin_notification(self, booking_data: dict, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            message = self._format_booking_notification(booking_data)
            await context.bot.send_message(
                chat_id=Config.ADMIN_CHAT_ID,
                text=message,
                parse_mode='HTML'
            )
            logger.info("Admin notification sent")
        except Exception as e:
            logger.error(f"Error sending admin notification: {str(e)}")

    def _format_booking_notification(self, booking_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        message = "üè® <b>–ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –ò–ó MINI APP</b> üè®\n\n"
        message += f"<b>üë§ –ì–æ—Å—Ç—å:</b> {booking_data.get('guest_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {booking_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        if booking_data.get('additional_phone'):
            message += f"<b>üìû –î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {booking_data['additional_phone']}\n"

        message += f"<b>üìÖ –ó–∞–µ–∑–¥:</b> {booking_data.get('check_in', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"<b>üìÖ –í—ã–µ–∑–¥:</b> {booking_data.get('check_out', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"<b>üåô –ù–æ—á–µ–π:</b> {booking_data.get('nights_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        if booking_data.get('total_baht'):
            message += f"<b>üí∞ –°—É–º–º–∞:</b> {booking_data['total_baht']} –±–∞—Ç—Ç\n"

        if booking_data.get('advance_payment') and booking_data['advance_payment'] != '0/0':
            message += f"<b>üí≥ –ê–≤–∞–Ω—Å:</b> {booking_data['advance_payment']}\n"

        if booking_data.get('additional_payment') and booking_data['additional_payment'] != '0/0':
            message += f"<b>üí≥ –î–æ–ø–ª–∞—Ç–∞:</b> {booking_data['additional_payment']}\n"

        if booking_data.get('source'):
            message += f"<b>üìä –ò—Å—Ç–æ—á–Ω–∏–∫:</b> {booking_data['source']}\n"

        if booking_data.get('flights'):
            message += f"<b>‚úàÔ∏è –†–µ–π—Å—ã:</b> {booking_data['flights']}\n"

        if booking_data.get('payment_method'):
            message += f"<b>üí∏ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {booking_data['payment_method']}\n"

        if booking_data.get('comment'):
            message += f"<b>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {booking_data['comment']}\n"

        message += f"\n<b>üè¢ –û–±—ä–µ–∫—Ç:</b> {booking_data.get('object_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        message += f"<b>üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä ID:</b> {booking_data.get('user_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        message += f"<b>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {booking_data.get('booking_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"

        return message

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("Booking process cancelled by user")
        await update.message.reply_text(
            "‚ùå *–ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω*",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    async def timeout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–∞–π–º–∞—É—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("Booking process timeout")
        await update.message.reply_text(
            "‚è∞ *–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_booking —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    def get_conversation_handler(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
        return ConversationHandler(
            entry_points=[CommandHandler('add_booking', self.start_booking)],
            states={
                SELECTING_OBJECT: [
                    CallbackQueryHandler(self.select_object, pattern='^object_')
                ],
                FILLING_FORM: [
                    MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.handle_web_app_data),
                    CallbackQueryHandler(self.check_saved_data, pattern='^check_saved_data$')
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self.cancel),
                CommandHandler('add_booking', self.start_booking)
            ],
            conversation_timeout=300,  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            name="add_booking_conversation"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def setup_add_booking_handler(application, bot_instance=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    logger.info("Setting up add booking handler")
    booking_handler = AddBookingHandler(bot_instance)
    conv_handler = booking_handler.get_conversation_handler()

    application.add_handler(conv_handler)
    logger.info("Add booking handler setup completed")