from datetime import date
import pandas as pd
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from common.logging_config import setup_logger
from common.config import Config  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –∫–æ–Ω—Ñ–∏–≥
import os

logger = setup_logger("view_booking")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ CSV —Ñ–∞–π–ª–æ–≤
CSV_FILES = Config.BOOKING_FILE_CSV_ID

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö
VB_CALLBACK_PREFIX = "vb_"  # vb = view_booking
VB_SHEET_SELECT = f"{VB_CALLBACK_PREFIX}sheet"

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
BOOKING_DATA_DIR = "booking_data"


def format_file_name(file_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv
    name_without_ext = file_name.replace('.csv', '')

    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    name_with_spaces = name_without_ext.replace('_', ' ')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ camel case (–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)
    formatted_name = name_with_spaces.title()

    return formatted_name


async def view_booking_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    try:
        logger.info(f"view_booking_handler called with update type: {type(update)}")

        if update.callback_query:
            logger.info(f"Callback query data: {update.callback_query.data}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é
            if update.callback_query.data.startswith(VB_CALLBACK_PREFIX):
                logger.info("Callback belongs to view_booking module, processing...")
                return await handle_callback(update, context)
            else:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback, –µ—Å–ª–∏ –æ–Ω –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
                logger.info(f"Callback not for view_booking, skipping: {update.callback_query.data}")
                return
        elif update.message:
            logger.info(f"Message received: {update.message.text}")
            return await handle_message(update, context)
        else:
            logger.error("Unknown update type in view_booking_handler")

    except Exception as e:
        logger.error(f"Error in view_booking_handler: {e}", exc_info=True)
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
        await send_reply(update, error_message)


async def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        logger.info("handle_message called")
        if 'step' not in context.user_data or context.user_data['step'] == 1:
            await show_file_selection(update, context)
            context.user_data['step'] = 2
        elif context.user_data['step'] == 2:
            selected_file = update.message.text.strip()
            await show_bookings(update, context, selected_file)
            del context.user_data['step']
    except Exception as e:
        logger.error(f"Error in handle_message: {e}", exc_info=True)


async def handle_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    try:
        query = update.callback_query
        logger.info(f"handle_callback called with data: {query.data}")
        await query.answer()

        logger.info(f"Received callback: {query.data}")

        if query.data.startswith(VB_SHEET_SELECT):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
            selected_file = query.data.replace(f"{VB_SHEET_SELECT}_", "")
            logger.info(f"Selected file: {selected_file}")
            await show_bookings(update, context, selected_file)

        try:
            await query.message.delete()
            logger.info("Previous message deleted")
        except Exception as e:
            logger.warning(f"Could not delete message: {e}")

        if 'step' in context.user_data:
            del context.user_data['step']

    except Exception as e:
        logger.error(f"Error in handle_callback: {e}", exc_info=True)


async def show_file_selection(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CSV —Ñ–∞–π–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        if not CSV_FILES:
            await send_reply(update, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
            return

        logger.info(f"Available CSV files: {CSV_FILES}")

        keyboard = []
        for file_name in CSV_FILES:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_name = format_file_name(file_name)
            callback_data = f"{VB_SHEET_SELECT}_{file_name}"
            logger.info(f"Creating button: {display_name} -> {callback_data}")
            keyboard.append([InlineKeyboardButton(display_name, callback_data=callback_data)])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await send_reply(update, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:", reply_markup)

    except Exception as e:
        logger.error(f"Error in show_file_selection: {e}", exc_info=True)
        await send_reply(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤")


def get_file_path(file_name):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–æ–º –ø–∞–ø–∫–∏ booking_data"""
    return os.path.join(BOOKING_DATA_DIR, file_name)


def load_bookings_from_csv(file_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    try:
        file_path = get_file_path(file_name)
        logger.info(f"Attempting to load CSV file: {file_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            logger.error(f"File not found: {file_path}")
            return None

        logger.info(f"File exists, reading CSV...")
        df = pd.read_csv(file_path, encoding='utf-8')
        logger.info(f"Successfully loaded CSV with {len(df)} rows")
        logger.info(f"Columns: {df.columns.tolist()}")
        logger.info(f"First few rows: {df.head(2).to_dict('records')}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ dd.mm.yyyy
        df['–ó–∞–µ–∑–¥'] = pd.to_datetime(df['–ó–∞–µ–∑–¥'], format='%d.%m.%Y', errors='coerce')
        df['–í—ã–µ–∑–¥'] = pd.to_datetime(df['–í—ã–µ–∑–¥'], format='%d.%m.%Y', errors='coerce')

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        initial_count = len(df)
        df = df.dropna(subset=['–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥'])
        filtered_count = len(df)

        logger.info(f"After date filtering: {filtered_count} rows (was {initial_count})")

        return df
    except Exception as e:
        logger.error(f"Error loading CSV file {file_name}: {e}", exc_info=True)
        return None


async def show_bookings(update, context, file_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        logger.info(f"show_bookings called with file: {file_name}")

        if file_name not in CSV_FILES:
            error_msg = f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {CSV_FILES}"
            logger.error(error_msg)
            await send_reply(update, error_msg)
            return

        df = load_bookings_from_csv(file_name)
        if df is None:
            await send_reply(update, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {file_name}")
            return

        if df.empty:
            await send_reply(update, f"üì≠ –§–∞–π–ª {file_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–≤—ã–µ–∑–¥ >= —Å–µ–≥–æ–¥–Ω—è)
        today = date.today()
        logger.info(f"Filtering bookings with check-out >= {today}")

        active_bookings = df[df['–í—ã–µ–∑–¥'].dt.date >= today].copy()
        logger.info(f"Found {len(active_bookings)} active bookings")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞
        active_bookings = active_bookings.sort_values('–ó–∞–µ–∑–¥')

        if active_bookings.empty:
            await send_reply(update, f"üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ —Ñ–∞–π–ª–µ {format_file_name(file_name)}")
            return

        messages = prepare_booking_messages(file_name, active_bookings)

        for msg in messages:
            await send_reply(update, msg, parse_mode='HTML')

    except Exception as e:
        logger.error(f"Error in show_bookings: {e}", exc_info=True)
        await send_reply(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö")


def format_date(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ dd.mm.yyyy"""
    if hasattr(dt, 'strftime'):
        return dt.strftime("%d.%m.%Y")
    return str(dt)


def prepare_booking_messages(file_name, bookings_df):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö"""
    messages = []
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_file_name = format_file_name(file_name)
    current_message = f"<b>üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ {display_file_name}:</b>\n\n"

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    bookings = bookings_df.to_dict('records')
    logger.info(f"Preparing messages for {len(bookings)} bookings")

    for i in range(len(bookings)):
        booking = bookings[i]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        guest = booking.get('–ì–æ—Å—Ç—å', '–ù–µ —É–∫–∞–∑–∞–Ω')
        check_in = booking.get('–ó–∞–µ–∑–¥')
        check_out = booking.get('–í—ã–µ–∑–¥')

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
        nights = (check_out - check_in).days if check_in and check_out else 0

        booking_info = (
            f"<b>üè† –ë—Ä–æ–Ω—å #{i + 1}</b>\n"
            f"<b>{guest}</b>\n"
            f"üìÖ {format_date(check_in)} - {format_date(check_out)}\n"
            f"üåô –ù–æ—á–µ–π: {nights}\n"
            f"üíµ –°—É–º–º–∞: {booking.get('–°—É–º–º–∞–ë–∞—Ç—Ç—ã', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} –±–∞—Ç—Ç\n\n"
        )

        if len(current_message + booking_info) > 4000:
            messages.append(current_message)
            current_message = booking_info
        else:
            current_message += booking_info

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö –º–µ–∂–¥—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
        if i < len(bookings) - 1:
            next_booking = bookings[i + 1]
            next_check_in = next_booking.get('–ó–∞–µ–∑–¥')

            if check_out and next_check_in and check_out != next_check_in:
                free_nights = (next_check_in - check_out).days
                if free_nights > 0:
                    free_period = (
                        f"üÜì –°–≤–æ–±–æ–¥–Ω–æ:\n"
                        f"üìÖ –° {format_date(check_out)} - –ü–æ {format_date(next_check_in)}\n"
                        f"üåô {free_nights} –Ω–æ—á–µ–π\n\n"
                    )

                    if len(current_message + free_period) > 4000:
                        messages.append(current_message)
                        current_message = free_period
                    else:
                        current_message += free_period

    messages.append(current_message)
    logger.info(f"Prepared {len(messages)} message(s)")
    return messages


async def send_reply(update, text, reply_markup=None, parse_mode=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if update.callback_query:
            return await update.callback_query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        elif update.message:
            return await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
    except Exception as e:
        logger.error(f"Error in send_reply: {e}", exc_info=True)