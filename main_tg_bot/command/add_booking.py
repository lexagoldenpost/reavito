# add_booking.py
import json
import csv
import os
import uuid
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

from common.config import Config
from common.logging_config import setup_logger

logger = setup_logger("add_booking")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_OBJECT, FILLING_FORM = range(2)


class AddBookingHandler:
    def __init__(self, bot_instance=None):
        self.csv_file = "citygate_p311.csv"
        self.objects = {
            "citygate_p311": "CityGate P311"
        }
        self.bot = bot_instance

    async def start_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        if self.bot and not await self.bot.check_user_permission(update):
            return ConversationHandler.END

        keyboard = [
            [InlineKeyboardButton("üè¢ CityGate P311", callback_data="object_citygate_p311")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üè® *–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        return SELECTING_OBJECT

    async def select_object(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞"""
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if self.bot and not await self.bot.check_user_permission(update):
            return ConversationHandler.END

        # –ò–∑–≤–ª–µ–∫–∞–µ–º object_id –∏–∑ callback_data, —É–±–∏—Ä–∞—è –ø—Ä–µ—Ñ–∏–∫—Å "object_"
        callback_data = query.data
        object_id = callback_data.replace("object_", "")

        if object_id not in self.objects:
            await query.edit_message_text(
                "‚ùå *–û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω*",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

        context.user_data['selected_object'] = object_id
        context.user_data['object_name'] = self.objects.get(object_id, "Unknown Object")

        # –ü–æ–ª—É—á–∞–µ–º URL —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        try:
            if self.bot:
                base_url = self.bot.get_web_app_url()
            else:
                # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å URL —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
                from main_tg_bot.web_app_server import get_web_app_url
                base_url = get_web_app_url()

            if not base_url:
                raise Exception("Web app URL not available")

        except Exception as e:
            logger.error(f"Failed to get web app URL: {e}")
            await query.edit_message_text(
                "‚ùå *–í–µ–±-—Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

        web_app_url = f"{base_url}/booking-form?object={object_id}&user_id={query.from_user.id}"
        web_app_info = WebAppInfo(url=web_app_url)

        keyboard = [
            [InlineKeyboardButton(
                "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                web_app=web_app_info
            )],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"‚úÖ *–í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç: {self.objects[object_id]}*\n\n"
            "–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        return FILLING_FORM

    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if self.bot and not await self.bot.check_user_permission(update):
                return ConversationHandler.END

            data = update.message.web_app_data.data
            booking_data = json.loads(data)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–∑ context
            if 'selected_object' in context.user_data:
                booking_data['object_id'] = context.user_data['selected_object']
                booking_data['object_name'] = context.user_data['object_name']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
            success = self.save_to_csv(booking_data)

            if success:
                await update.message.reply_text(
                    "‚úÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*\n\n"
                    f"üë§ *–ì–æ—Å—Ç—å:* {booking_data.get('guest_name', '')}\n"
                    f"üìÖ *–î–∞—Ç—ã:* {booking_data.get('check_in', '')} - {booking_data.get('check_out', '')}\n"
                    f"üí∞ *–°—É–º–º–∞:* {booking_data.get('total_baht', '')} –±–∞—Ç—Ç\n"
                    f"üè¢ *–û–±—ä–µ–∫—Ç:* {booking_data.get('object_name', '')}",
                    parse_mode='Markdown'
                )
                logger.info(f"Booking saved for guest: {booking_data.get('guest_name', '')}")
            else:
                await update.message.reply_text(
                    "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!*\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode='Markdown'
                )

            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error processing web app data: {e}")
            await update.message.reply_text(
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

    def save_to_csv(self, booking_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ CSV —Ñ–∞–π–ª"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            file_exists = os.path.isfile(self.csv_file)

            with open(self.csv_file, 'a', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    '–ì–æ—Å—Ç—å', '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π',
                    '–°—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º', '–°—É–º–º–∞–ë–∞—Ç—Ç—ã', '–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏', '–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏',
                    '–ò—Å—Ç–æ—á–Ω–∏–∫', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã', '–†–∞—Å—Ö–æ–¥—ã', '–û–ø–ª–∞—Ç–∞', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                    '—Ç–µ–ª–µ—Ñ–æ–Ω', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', '–†–µ–π—Å—ã', '_sync_id', 'ID'
                ]

                writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=',')

                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π, –ø–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if not file_exists:
                    writer.writeheader()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
                sync_id = str(uuid.uuid4())
                record_id = self.get_next_id()

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
                row_data = {
                    '–ì–æ—Å—Ç—å': booking_data.get('guest_name', ''),
                    '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è': booking_data.get('booking_date', ''),
                    '–ó–∞–µ–∑–¥': booking_data.get('check_in', ''),
                    '–í—ã–µ–∑–¥': booking_data.get('check_out', ''),
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π': booking_data.get('nights_count', ''),
                    '–°—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º': booking_data.get('monthly_sum', ''),
                    '–°—É–º–º–∞–ë–∞—Ç—Ç—ã': booking_data.get('total_baht', ''),
                    '–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏': booking_data.get('advance_payment', ''),
                    '–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏': booking_data.get('additional_payment', ''),
                    '–ò—Å—Ç–æ—á–Ω–∏–∫': booking_data.get('source', ''),
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã': booking_data.get('extra_charges', ''),
                    '–†–∞—Å—Ö–æ–¥—ã': booking_data.get('expenses', ''),
                    '–û–ø–ª–∞—Ç–∞': booking_data.get('payment_method', ''),
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': booking_data.get('comment', ''),
                    '—Ç–µ–ª–µ—Ñ–æ–Ω': booking_data.get('phone', ''),
                    '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω': booking_data.get('additional_phone', ''),
                    '–†–µ–π—Å—ã': booking_data.get('flights', ''),
                    '_sync_id': sync_id,
                    'ID': record_id
                }

                writer.writerow(row_data)

            return True

        except Exception as e:
            logger.error(f"Error saving to CSV: {e}")
            return False

    def get_next_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ ID –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        try:
            if not os.path.isfile(self.csv_file):
                return 1

            with open(self.csv_file, 'r', encoding='utf-8') as csvfile:
                reader = csv.DictReader(csvfile)
                rows = list(reader)
                if not rows:
                    return 1

                # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID
                max_id = 0
                for row in rows:
                    try:
                        row_id = int(row.get('ID', 0))
                        if row_id > max_id:
                            max_id = row_id
                    except (ValueError, TypeError):
                        continue

                return max_id + 1

        except Exception as e:
            logger.error(f"Error getting next ID: {e}")
            return 1

    async def cancel_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            "‚ùå *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ*",
            parse_mode='Markdown'
        )

        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
        await update.message.reply_text(
            "‚ùå *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ*",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    async def timeout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏"""
        await update.message.reply_text(
            "‚è∞ *–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /add_booking*",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    def get_conversation_handler(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ConversationHandler"""
        return ConversationHandler(
            entry_points=[CommandHandler("add_booking", self.start_booking)],
            states={
                SELECTING_OBJECT: [
                    CallbackQueryHandler(self.select_object, pattern="^object_"),
                    CallbackQueryHandler(self.cancel_booking, pattern="^cancel_booking$")
                ],
                FILLING_FORM: [
                    MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.handle_web_app_data),
                    CallbackQueryHandler(self.cancel_booking, pattern="^cancel_booking$")
                ]
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel),
                CommandHandler("add_booking", self.start_booking)
            ],
            conversation_timeout=300,  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            name="add_booking_conversation"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def setup_add_booking_handler(application, bot_instance=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    booking_handler = AddBookingHandler(bot_instance)
    conv_handler = booking_handler.get_conversation_handler()
    application.add_handler(conv_handler)
    logger.info("Add booking handler setup completed")