# add_booking.py

import uuid
from datetime import datetime

import pandas as pd
from main_tg_bot.booking_objects import BOOKING_SHEETS, get_booking_sheet
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
from main_tg_bot.google_sheets.sync_manager import GoogleSheetsCSVSync

from common.logging_config import setup_logger

logger = setup_logger("add_booking")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    SELECT_SHEET,
    GUEST_NAME,
    BOOKING_DATE,
    CHECK_IN,
    CHECK_OUT,
    NIGHTS,
    MONTHLY_SUM,
    TOTAL_SUM,
    ADVANCE,
    ADDITIONAL_PAYMENT,
    SOURCE,
    EXTRA_CHARGES,
    EXPENSES,
    PAYMENT_METHOD,
    COMMENT,
    PHONE,
    EXTRA_PHONE,
    FLIGHTS,
    CONFIRM,
) = range(19)


class AddBookingHandler:
    def __init__(self, bot):
        self.bot = bot
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –æ–¥–∏–Ω —Ä–∞–∑
        self.sync_manager = GoogleSheetsCSVSync()

    def get_conversation_handler(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler"""
        return ConversationHandler(
            entry_points=[CommandHandler("add_booking", self.start_add_booking)],
            states={
                SELECT_SHEET: [CallbackQueryHandler(self.select_sheet)],
                GUEST_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.guest_name)
                ],
                BOOKING_DATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.booking_date)
                ],
                CHECK_IN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.check_in)
                ],
                CHECK_OUT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.check_out)
                ],
                NIGHTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.nights),
                    CallbackQueryHandler(self.skip_nights, pattern="^skip_nights$"),
                ],
                MONTHLY_SUM: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.monthly_sum),
                    CallbackQueryHandler(
                        self.skip_monthly_sum, pattern="^skip_monthly_sum$"
                    ),
                ],
                TOTAL_SUM: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.total_sum)
                ],
                ADVANCE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.advance)
                ],
                ADDITIONAL_PAYMENT: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, self.additional_payment
                    ),
                    CallbackQueryHandler(
                        self.skip_additional_payment,
                        pattern="^skip_additional_payment$",
                    ),
                ],
                SOURCE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.source)
                ],
                EXTRA_CHARGES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.extra_charges),
                    CallbackQueryHandler(
                        self.skip_extra_charges, pattern="^skip_extra_charges$"
                    ),
                ],
                EXPENSES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.expenses),
                    CallbackQueryHandler(self.skip_expenses, pattern="^skip_expenses$"),
                ],
                PAYMENT_METHOD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.payment_method)
                ],
                COMMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.comment),
                    CallbackQueryHandler(self.skip_comment, pattern="^skip_comment$"),
                ],
                PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.phone)
                ],
                EXTRA_PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.extra_phone),
                    CallbackQueryHandler(
                        self.skip_extra_phone, pattern="^skip_extra_phone$"
                    ),
                ],
                FLIGHTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.flights),
                    CallbackQueryHandler(self.skip_flights, pattern="^skip_flights$"),
                ],
                CONFIRM: [CallbackQueryHandler(self.confirm_booking)],
            },
            fallbacks=[
                CommandHandler("cancel", self.handle_cancel_anywhere),
                MessageHandler(filters.Regex(r"^/cancel$"), self.handle_cancel_anywhere),
            ],
            conversation_timeout=300,
            allow_reentry=True,
        )

    async def handle_cancel_anywhere(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user = update.effective_user
        context.user_data.clear()
        logger.info(f"Booking cancelled by user {user.id}")

        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(
                "‚ùå –¢–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                "–î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_booking"
            )
        return ConversationHandler.END

    async def start_add_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            user = update.effective_user
            logger.info(f"User {user.username or user.id} started add_booking")

            context.user_data.clear()
            context.user_data["booking_date"] = datetime.now().strftime("%d.%m.%Y")

            message = update.message or update.callback_query.message

            keyboard = [
                [InlineKeyboardButton(sheet_name, callback_data=sheet_name)]
                for sheet_name in BOOKING_SHEETS.keys()
            ]
            keyboard.append([InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥", callback_data="exit_command")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await message.reply_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return SELECT_SHEET

        except Exception as e:
            logger.error(f"Error in start_add_booking: {e}", exc_info=True)
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    async def select_sheet(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            query = update.callback_query
            await query.answer()

            if query.data == "exit_command":
                return await self.handle_exit(update, context)

            selected_sheet = query.data
            booking_sheet = get_booking_sheet(selected_sheet)
            if not booking_sheet:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END

            context.user_data["sheet"] = selected_sheet
            context.user_data["booking_sheet"] = booking_sheet

            await query.edit_message_text(
                text=f"üìå –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç: {selected_sheet}\n\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–æ—Å—Ç—è:"
            )
            return GUEST_NAME

        except Exception as e:
            logger.error(f"Error in select_sheet: {e}", exc_info=True)
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞")
            return ConversationHandler.END

    async def handle_exit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        context.user_data.clear()
        await query.edit_message_text(
            "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_booking"
        )
        return ConversationHandler.END

    async def guest_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        guest_name = update.message.text.strip()
        if not guest_name:
            await update.message.reply_text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return GUEST_NAME
        context.user_data["guest"] = guest_name
        await update.message.reply_text("üè® –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return CHECK_IN

    async def booking_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            date_str = update.message.text.strip()
            if not date_str:
                date_str = datetime.now().strftime("%d.%m.%Y")
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            context.user_data["booking_date"] = date.strftime("%d.%m.%Y")
            await update.message.reply_text("üè® –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
            return CHECK_IN
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return BOOKING_DATE

    async def check_in(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            date_str = update.message.text.strip()
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            context.user_data["check_in"] = date.strftime("%d.%m.%Y")
            await update.message.reply_text("üö™ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
            return CHECK_OUT
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return CHECK_IN

    async def check_out(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            date_str = update.message.text.strip()
            check_out_date = datetime.strptime(date_str, "%d.%m.%Y").date()
            check_in_str = context.user_data.get("check_in")
            if not check_in_str:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.")
                return CHECK_OUT

            check_in_date = datetime.strptime(check_in_str, "%d.%m.%Y").date()

            # üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–µ–∑–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∑–∞–µ–∑–¥–∞
            if check_out_date < check_in_date:
                await update.message.reply_text(
                    "‚ùå –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:"
                )
                return CHECK_OUT

            formatted_date = check_out_date.strftime("%d.%m.%Y")
            context.user_data["check_out"] = formatted_date

            nights = (check_out_date - check_in_date).days
            context.user_data["nights"] = str(nights)
            await update.message.reply_text(f"üåô –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π: {nights}")

            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_monthly_sum")]
            ])
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –º–µ—Å—è—Ü–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–∫—Ç 15000 –ù–æ—è 20000'):",
                reply_markup=reply_markup,
            )
            return MONTHLY_SUM

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return CHECK_OUT
        except Exception as e:
            logger.error(f"Error in check_out: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞")
            return ConversationHandler.END

    async def nights(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        nights = update.message.text.strip()
        if not nights.isdigit():
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–æ—á–µ–π:")
            return NIGHTS
        context.user_data["nights"] = nights
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_monthly_sum")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –º–µ—Å—è—Ü–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–∫—Ç 15000 –ù–æ—è 20000'):",
            reply_markup=reply_markup,
        )
        return MONTHLY_SUM

    async def skip_nights(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üåô –ü—Ä–æ–ø—É—â–µ–Ω–æ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_monthly_sum")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –º–µ—Å—è—Ü–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–∫—Ç 15000 –ù–æ—è 20000'):",
            reply_markup=reply_markup,
        )
        return MONTHLY_SUM

    async def monthly_sum(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["monthly_sum"] = update.message.text.strip()
        await update.message.reply_text("üíµ –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        return TOTAL_SUM

    async def skip_monthly_sum(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üí∞ –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Å—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="üíµ –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        return TOTAL_SUM

    async def total_sum(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["total_sum"] = update.message.text.strip()
        await update.message.reply_text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞–≤–∞–Ω—Å–∞ (–≤ –±–∞—Ç—Ç–∞—Ö/—Ä—É–±–ª—è—Ö):")
        return ADVANCE

    async def advance(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["advance"] = update.message.text.strip()
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_additional_payment")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üí¥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):",
            reply_markup=reply_markup,
        )
        return ADDITIONAL_PAYMENT

    async def additional_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["additional_payment"] = update.message.text.strip()
        await update.message.reply_text("üìå –í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ê–≤–∏—Ç–æ, Booking –∏ —Ç.–¥.):")
        return SOURCE

    async def skip_additional_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üí¥ –ü—Ä–æ–ø—É—â–µ–Ω–æ: –¥–æ–ø–ª–∞—Ç–∞")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üìå –í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ê–≤–∏—Ç–æ, Booking –∏ —Ç.–¥.):",
        )
        return SOURCE

    async def source(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["source"] = update.message.text.strip()
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_extra_charges")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üí∏ –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):",
            reply_markup=reply_markup,
        )
        return EXTRA_CHARGES

    async def extra_charges(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["extra_charges"] = update.message.text.strip()
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_expenses")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üßπ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã (—É–±–æ—Ä–∫–∞ –∏ —Ç.–¥.):",
            reply_markup=reply_markup,
        )
        return EXPENSES

    async def skip_extra_charges(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üí∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_expenses")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üßπ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã (—É–±–æ—Ä–∫–∞ –∏ —Ç.–¥.):",
            reply_markup=reply_markup,
        )
        return EXPENSES

    async def expenses(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["expenses"] = update.message.text.strip()
        await update.message.reply_text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
        return PAYMENT_METHOD

    async def skip_expenses(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üßπ –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Ä–∞—Å—Ö–æ–¥—ã")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="üí≥ –í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        )
        return PAYMENT_METHOD

    async def payment_method(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["payment_method"] = update.message.text.strip()
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):",
            reply_markup=reply_markup,
        )
        return COMMENT

    async def comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["comment"] = update.message.text.strip()
        await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return PHONE

    async def skip_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üìù –ü—Ä–æ–ø—É—â–µ–Ω–æ: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:"
        )
        return PHONE

    async def phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["phone"] = update.message.text.strip()
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_extra_phone")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì± –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å):",
            reply_markup=reply_markup,
        )
        return EXTRA_PHONE

    async def extra_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["extra_phone"] = update.message.text.strip()
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_flights")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å):",
            reply_markup=reply_markup,
        )
        return FLIGHTS

    async def skip_extra_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üì± –ü—Ä–æ–ø—É—â–µ–Ω–æ: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_flights")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å):",
            reply_markup=reply_markup,
        )
        return FLIGHTS

    async def flights(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        if update.callback_query and update.callback_query.data == "skip_flights":
            query = update.callback_query
            await query.answer()
            context.user_data["flights"] = ""
            await query.edit_message_text("‚úàÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–∞—Ö")
        else:
            context.user_data["flights"] = update.message.text.strip()

        summary = self._generate_summary(context.user_data)
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n{summary}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
            reply_markup=reply_markup,
        )
        return CONFIRM

    async def skip_flights(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        return await self.flights(update, context)

    async def confirm_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()

        if query.data in ("cancel", "exit_command"):
            return await self.handle_exit(update, context)

        try:
            booking_sheet = context.user_data.get("booking_sheet")
            if not booking_sheet:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return ConversationHandler.END

            success = await self._save_booking_to_csv(booking_sheet, context.user_data)

            if success:
                sheet_name = context.user_data["sheet"]
                # üì• –°–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–∞–µ–º –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                await query.edit_message_text(
                    f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:\n"
                    f"üìÅ {booking_sheet.filename}"
                )

                # üîÅ –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                sync_success = self.sync_manager.sync_sheet(sheet_name, direction='csv_to_google')

                # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                if sync_success:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Google –¢–∞–±–ª–∏—Ü–µ–π!"
                    )
                else:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google –¢–∞–±–ª–∏—Ü–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å.\n"
                             "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–∑–∂–µ."
                    )
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            context.user_data.clear()
            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error in confirm_booking: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return ConversationHandler.END

    async def _save_booking_to_csv(self, booking_sheet, user_data):
        try:
            import os
            filepath = booking_sheet.filepath
            columns = [
                '–ì–æ—Å—Ç—å', '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π',
                '–°—É–º–º–∞–ë–∞—Ç—Ç—ã', '–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏', '–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏', '–ò—Å—Ç–æ—á–Ω–∏–∫',
                '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã', '–†–∞—Å—Ö–æ–¥—ã', '–û–ø–ª–∞—Ç–∞', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                '—Ç–µ–ª–µ—Ñ–æ–Ω', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', '–†–µ–π—Å—ã', '_sync_id'
            ]

            if not os.path.exists(filepath) or os.path.getsize(filepath) == 0:
                df = pd.DataFrame(columns=columns)
            else:
                df = booking_sheet.load()

            new_booking = {
                '–ì–æ—Å—Ç—å': user_data.get('guest', ''),
                '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è': user_data.get('booking_date', ''),
                '–ó–∞–µ–∑–¥': user_data.get('check_in', ''),
                '–í—ã–µ–∑–¥': user_data.get('check_out', ''),
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π': user_data.get('nights', ''),
                '–°—É–º–º–∞–ë–∞—Ç—Ç—ã': user_data.get('total_sum', ''),
                '–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏': user_data.get('advance', ''),
                '–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏': user_data.get('additional_payment', ''),
                '–ò—Å—Ç–æ—á–Ω–∏–∫': user_data.get('source', ''),
                '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã': user_data.get('extra_charges', ''),
                '–†–∞—Å—Ö–æ–¥—ã': user_data.get('expenses', ''),
                '–û–ø–ª–∞—Ç–∞': user_data.get('payment_method', ''),
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': user_data.get('comment', ''),
                '—Ç–µ–ª–µ—Ñ–æ–Ω': user_data.get('phone', ''),
                '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω': user_data.get('extra_phone', ''),
                '–†–µ–π—Å—ã': user_data.get('flights', ''),
                '_sync_id': str(uuid.uuid4())
            }

            new_df = pd.DataFrame([new_booking])
            df = pd.concat([df, new_df], ignore_index=True)
            booking_sheet.save(df)
            logger.info(f"Successfully saved booking to {booking_sheet.filename}")
            return True

        except Exception as e:
            logger.error(f"Error saving booking to CSV: {e}", exc_info=True)
            return False

    def _generate_summary(self, user_data):
        summary = []
        fields = [
            ("–û–±—ä–µ–∫—Ç", "sheet"),
            ("–ì–æ—Å—Ç—å", "guest"),
            ("–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "booking_date"),
            ("–ó–∞–µ–∑–¥", "check_in"),
            ("–í—ã–µ–∑–¥", "check_out"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π", "nights"),
            ("–°—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º", "monthly_sum"),
            ("–û–±—â–∞—è —Å—É–º–º–∞", "total_sum"),
            ("–ê–≤–∞–Ω—Å", "advance"),
            ("–î–æ–ø–ª–∞—Ç–∞", "additional_payment"),
            ("–ò—Å—Ç–æ—á–Ω–∏–∫", "source"),
            ("–î–æ–ø. –ø–ª–∞—Ç–µ–∂–∏", "extra_charges"),
            ("–†–∞—Å—Ö–æ–¥—ã", "expenses"),
            ("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "payment_method"),
            ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "comment"),
            ("–¢–µ–ª–µ—Ñ–æ–Ω", "phone"),
            ("–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω", "extra_phone"),
            ("–†–µ–π—Å—ã", "flights"),
        ]
        for label, key in fields:
            value = user_data.get(key)
            if value:
                summary.append(f"‚Ä¢ {label}: {value}")
        return "\n".join(summary)