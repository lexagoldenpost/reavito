# add_booking.py
import json
import csv
import os
import uuid
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

from common.config import Config
from common.logging_config import setup_logger
from main_tg_bot.command.view_booking import get_file_path

logger = setup_logger("add_booking")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_OBJECT, FILLING_FORM = range(2)


class AddBookingHandler:
    def __init__(self, bot_instance=None):
        self.csv_file = "citygate_p311.csv"
        self.objects = {
            "citygate_p311": "CityGate P311"
        }
        self.bot = bot_instance
        # URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å —Ñ–æ—Ä–º–æ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.remote_web_app_url = Config.REMOTE_WEB_APP_URL + Config.REMOTE_WEB_APP_CREATE_BOOKING_URL

    async def start_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("=== START BOOKING PROCESS ===")
        logger.info(f"User: {update.effective_user.username} (ID: {update.effective_user.id})")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        if self.bot and not await self.bot.check_user_permission(update):
            logger.warning("User permission denied")
            return ConversationHandler.END

        keyboard = [
            [InlineKeyboardButton("üè¢ CityGate P311", callback_data="object_citygate_p311")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üè® *–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        logger.info("Object selection presented to user")
        return SELECTING_OBJECT

    async def select_object(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞"""
        query = update.callback_query
        await query.answer()

        logger.info(f"=== OBJECT SELECTION ===")
        logger.info(f"User: {query.from_user.username} (ID: {query.from_user.id})")
        logger.info(f"Callback data: {query.data}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if self.bot and not await self.bot.check_user_permission(update):
            logger.warning("User permission denied in object selection")
            return ConversationHandler.END

        # –ò–∑–≤–ª–µ–∫–∞–µ–º object_id –∏–∑ callback_data, —É–±–∏—Ä–∞—è –ø—Ä–µ—Ñ–∏–∫—Å "object_"
        callback_data = query.data
        object_id = callback_data.replace("object_", "")

        logger.info(f"Selected object: {object_id}")

        if object_id not in self.objects:
            logger.error(f"Object not found: {object_id}")
            await query.edit_message_text(
                "‚ùå *–û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω*",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

        context.user_data['selected_object'] = object_id
        context.user_data['object_name'] = self.objects.get(object_id, "Unknown Object")

        logger.info(f"Context user_data updated: {context.user_data}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        try:
            if not self.remote_web_app_url:
                raise Exception("Remote web app URL not configured")

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            web_app_url = f"{self.remote_web_app_url}/?object={object_id}&user_id={query.from_user.id}"
            web_app_info = WebAppInfo(url=web_app_url)

            logger.info(f"Web app URL created: {web_app_url}")

            keyboard = [
                [InlineKeyboardButton(
                    "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                    web_app=web_app_info
                )],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"‚úÖ *–í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç: {self.objects[object_id]}*\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            logger.info("Web app button presented to user")
            return FILLING_FORM

        except Exception as e:
            logger.error(f"Failed to create web app URL: {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ñ–æ—Ä–º*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("=== WEB APP DATA RECEIVED ===")
        logger.info(f"Update: {update}")
        logger.info(f"Update type: {update.update_type}")
        logger.info(
            f"Has web_app_data: {hasattr(update, 'message') and update.message and hasattr(update.message, 'web_app_data')}")

        if update.message and update.message.web_app_data:
            logger.info(f"WebApp data object: {update.message.web_app_data}")
            logger.info(f"Button_text: {update.message.web_app_data.button_text}")

        logger.info(f"User: {update.effective_user.username} (ID: {update.effective_user.id})")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if self.bot and not await self.bot.check_user_permission(update):
                logger.warning("User permission denied in web app data handling")
                return ConversationHandler.END

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å
            if not update.message or not update.message.web_app_data:
                logger.error("No web_app_data found in update")
                await update.message.reply_text(
                    "‚ùå *–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode='Markdown'
                )
                return ConversationHandler.END

            data = update.message.web_app_data.data
            logger.info(f"Raw web app data length: {len(data)}")
            logger.info(f"Raw web app data: {data}")

            booking_data = json.loads(data)
            logger.info(f"Parsed booking data keys: {booking_data.keys()}")
            logger.info(f"Parsed booking data: {booking_data}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–∑ context
            if 'selected_object' in context.user_data:
                booking_data['object_id'] = context.user_data['selected_object']
                booking_data['object_name'] = context.user_data['object_name']
                logger.info(f"Added object info from context: {context.user_data}")
            else:
                logger.warning("No selected_object found in context user_data")
                booking_data['object_id'] = 'citygate_p311'
                booking_data['object_name'] = 'CityGate P311'

            logger.info(f"Final booking data for saving: {booking_data}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
            success = self.save_to_csv(booking_data)

            if success:
                logger.info("Booking successfully saved to CSV")
                await update.message.reply_text(
                    "‚úÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*\n\n"
                    f"üë§ *–ì–æ—Å—Ç—å:* {booking_data.get('guest_name', '')}\n"
                    f"üìÖ *–î–∞—Ç—ã:* {booking_data.get('check_in', '')} - {booking_data.get('check_out', '')}\n"
                    f"üí∞ *–°—É–º–º–∞:* {booking_data.get('total_baht', '')} –±–∞—Ç—Ç\n"
                    f"üè¢ *–û–±—ä–µ–∫—Ç:* {booking_data.get('object_name', '')}",
                    parse_mode='Markdown'
                )
                logger.info(f"Booking saved for guest: {booking_data.get('guest_name', '')}")
            else:
                logger.error("Failed to save booking to CSV")
                await update.message.reply_text(
                    "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!*\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode='Markdown'
                )

            return ConversationHandler.END

        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}")
            logger.error(f"Raw data that failed to parse: {data}")
            await update.message.reply_text(
                "‚ùå *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö*\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"Error processing web app data: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END

    def save_to_csv(self, booking_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ CSV —Ñ–∞–π–ª"""
        logger.info("=== SAVING TO CSV ===")
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º CSV —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            object_id = booking_data.get('object_id', 'citygate_p311')
            csv_file = f"{object_id}.csv"

            logger.info(f"Target CSV file: {csv_file}")
            logger.info(f"Current working directory: {os.getcwd()}")
            logger.info(f"Files in current directory: {os.listdir('.')}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            file_exists = os.path.isfile(csv_file)
            logger.info(f"File exists: {file_exists}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
            if file_exists:
                try:
                    with open(csv_file, 'a') as test_file:
                        test_file.write('')
                    logger.info("File is writable")
                except Exception as e:
                    logger.error(f"File is not writable: {e}")
                    return False

            with open(csv_file, 'a', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    '–ì–æ—Å—Ç—å', '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π',
                    '–°—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º', '–°—É–º–º–∞–ë–∞—Ç—Ç—ã', '–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏', '–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏',
                    '–ò—Å—Ç–æ—á–Ω–∏–∫', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã', '–†–∞—Å—Ö–æ–¥—ã', '–û–ø–ª–∞—Ç–∞', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                    '—Ç–µ–ª–µ—Ñ–æ–Ω', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', '–†–µ–π—Å—ã', '_sync_id'
                ]

                writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=',')

                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π, –ø–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if not file_exists:
                    logger.info("Writing headers to new CSV file")
                    writer.writeheader()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π sync_id
                sync_id = str(uuid.uuid4())
                logger.info(f"Generated sync_id: {sync_id}")

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
                row_data = {
                    '–ì–æ—Å—Ç—å': booking_data.get('guest_name', ''),
                    '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è': booking_data.get('booking_date', ''),
                    '–ó–∞–µ–∑–¥': booking_data.get('check_in', ''),
                    '–í—ã–µ–∑–¥': booking_data.get('check_out', ''),
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π': booking_data.get('nights_count', ''),
                    '–°—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º': booking_data.get('monthly_sum', ''),
                    '–°—É–º–º–∞–ë–∞—Ç—Ç—ã': booking_data.get('total_baht', ''),
                    '–ê–≤–∞–Ω—Å –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏': booking_data.get('advance_payment', ''),
                    '–î–æ–ø–ª–∞—Ç–∞ –ë–∞—Ç—Ç—ã/–†—É–±–ª–∏': booking_data.get('additional_payment', ''),
                    '–ò—Å—Ç–æ—á–Ω–∏–∫': booking_data.get('source', ''),
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã': booking_data.get('extra_charges', ''),
                    '–†–∞—Å—Ö–æ–¥—ã': booking_data.get('expenses', ''),
                    '–û–ø–ª–∞—Ç–∞': booking_data.get('payment_method', ''),
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': booking_data.get('comment', ''),
                    '—Ç–µ–ª–µ—Ñ–æ–Ω': booking_data.get('phone', ''),
                    '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω': booking_data.get('additional_phone', ''),
                    '–†–µ–π—Å—ã': booking_data.get('flights', ''),
                    '_sync_id': sync_id
                }

                logger.info(f"Row data to write: {row_data}")

                writer.writerow(row_data)
                logger.info("Data successfully written to CSV")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
            if os.path.exists(csv_file):
                file_size = os.path.getsize(csv_file)
                logger.info(f"CSV file size after write: {file_size} bytes")

                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                try:
                    with open(csv_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        logger.info(f"Total lines in CSV: {len(lines)}")
                        if lines:
                            logger.info(f"Last line in CSV: {lines[-1]}")
                except Exception as e:
                    logger.error(f"Error reading CSV for verification: {e}")

            logger.info(f"Successfully saved booking to {csv_file}")
            return True

        except Exception as e:
            logger.error(f"Error saving to CSV: {e}", exc_info=True)
            return False

    async def cancel_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
        query = update.callback_query
        await query.answer()

        logger.info(f"Booking cancelled by user: {query.from_user.username}")

        await query.edit_message_text(
            "‚ùå *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ*",
            parse_mode='Markdown'
        )

        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
        logger.info(f"Booking cancelled via command by: {update.effective_user.username}")

        await update.message.reply_text(
            "‚ùå *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ*",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    async def timeout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏"""
        logger.info(f"Booking session timeout for user: {update.effective_user.username}")

        await update.message.reply_text(
            "‚è∞ *–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /add_booking*",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    def get_conversation_handler(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ConversationHandler"""
        logger.info("Setting up AddBooking conversation handler")
        return ConversationHandler(
            entry_points=[CommandHandler("add_booking", self.start_booking)],
            states={
                SELECTING_OBJECT: [
                    CallbackQueryHandler(self.select_object, pattern="^object_"),
                    CallbackQueryHandler(self.cancel_booking, pattern="^cancel_booking$")
                ],
                FILLING_FORM: [
                    MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.handle_web_app_data),
                    CallbackQueryHandler(self.cancel_booking, pattern="^cancel_booking$")
                ]
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel),
                CommandHandler("add_booking", self.start_booking)
            ],
            conversation_timeout=300,  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            name="add_booking_conversation"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def setup_add_booking_handler(application, bot_instance=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    logger.info("Setting up add booking handler")
    booking_handler = AddBookingHandler(bot_instance)
    conv_handler = booking_handler.get_conversation_handler()
    application.add_handler(conv_handler)
    logger.info("Add booking handler setup completed")