# view_dates.py
from datetime import date, timedelta
import pandas as pd
import os
from telegram import Update
from typing import List, Tuple
from common.logging_config import setup_logger
from common.config import Config

logger = setup_logger("view_dates")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ CSV —Ñ–∞–π–ª–æ–≤
CSV_FILES = Config.BOOKING_FILE_CSV_ID

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
BOOKING_DATA_DIR = "booking_data"


def format_file_name(file_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv
    name_without_ext = file_name.replace('.csv', '')
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    name_with_spaces = name_without_ext.replace('_', ' ')
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ camel case (–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)
    formatted_name = name_with_spaces.title()
    return formatted_name


def get_file_path(file_name):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–æ–º –ø–∞–ø–∫–∏ booking_data"""
    return os.path.join(BOOKING_DATA_DIR, file_name)


def load_bookings_from_csv(file_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    try:
        file_path = get_file_path(file_name)
        logger.info(f"Attempting to load CSV file: {file_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            logger.error(f"File not found: {file_path}")
            return None

        logger.info(f"File exists, reading CSV...")
        df = pd.read_csv(file_path, encoding='utf-8')
        logger.info(f"Successfully loaded CSV with {len(df)} rows")
        logger.info(f"Columns: {df.columns.tolist()}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ dd.mm.yyyy
        df['–ó–∞–µ–∑–¥'] = pd.to_datetime(df['–ó–∞–µ–∑–¥'], format='%d.%m.%Y', errors='coerce')
        df['–í—ã–µ–∑–¥'] = pd.to_datetime(df['–í—ã–µ–∑–¥'], format='%d.%m.%Y', errors='coerce')

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        initial_count = len(df)
        df = df.dropna(subset=['–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥'])
        filtered_count = len(df)

        logger.info(f"After date filtering: {filtered_count} rows (was {initial_count})")

        return df
    except Exception as e:
        logger.error(f"Error loading CSV file {file_name}: {e}", exc_info=True)
        return None


async def view_dates_handler(update: Update, context):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç –≤ —Ä–∞–∑—Ä–µ–∑–µ CSV —Ñ–∞–π–ª–æ–≤"""
    if not CSV_FILES:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return

    for file_name in CSV_FILES:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞
        df = load_bookings_from_csv(file_name)

        if df is None:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {file_name}")
            continue

        if df.empty:
            await update.message.reply_text(f"üì≠ –§–∞–π–ª {file_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        booked_periods = []
        for _, row in df.iterrows():
            check_in = row['–ó–∞–µ–∑–¥'].date() if hasattr(row['–ó–∞–µ–∑–¥'], 'date') else row['–ó–∞–µ–∑–¥']
            check_out = row['–í—ã–µ–∑–¥'].date() if hasattr(row['–í—ã–µ–∑–¥'], 'date') else row['–í—ã–µ–∑–¥']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
            if isinstance(check_in, date) and isinstance(check_out, date):
                booked_periods.append((check_in, check_out))

        # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        free_periods = find_free_periods(booked_periods)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        display_name = format_file_name(file_name)
        message = f"üìÖ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è {display_name}</b>\n\n"

        if not free_periods:
            message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"
        else:
            message += "üÜì –°–≤–æ–±–æ–¥–Ω–æ:\n"
            for start, end in free_periods:
                nights = (end - start).days
                message += (
                    f"üìÖ –° {start.strftime('%d.%m.%Y')} - –ü–æ {end.strftime('%d.%m.%Y')}\n"
                    f"üåô {nights} –Ω–æ—á–µ–π\n\n"
                )

        await update.message.reply_text(message, parse_mode='HTML')


def find_free_periods(booked_periods: List[Tuple[date, date]],
                      start_date: date = date.today(),
                      end_date: date = date.today() + timedelta(days=365)) -> List[Tuple[date, date]]:
    """
  –ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –º–µ–∂–¥—É –∑–∞–Ω—è—Ç—ã–º–∏ –¥–∞—Ç–∞–º–∏.

  Args:
      booked_periods: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (check_in, check_out)
      start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
      end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +1 –≥–æ–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è)

  Returns:
      –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–∞–º–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
  """
    if not booked_periods:
        return [(start_date, end_date)]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞
    sorted_periods = sorted(booked_periods, key=lambda x: x[0])

    free_periods = []
    previous_end = start_date

    for period in sorted_periods:
        current_start, current_end = period

        # –ï—Å–ª–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏ —Ç–µ–∫—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
        if previous_end < current_start:
            free_periods.append((previous_end, current_start - timedelta(days=1)))

        # –û–±–Ω–æ–≤–ª—è–µ–º previous_end –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        if current_end > previous_end:
            previous_end = current_end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if previous_end < end_date:
        free_periods.append((previous_end, end_date))

    return free_periods