# main_tg_bot/command/view_dates.py

from datetime import date, timedelta
import pandas as pd
import os
from telegram import Update
from typing import List, Tuple
from common.logging_config import setup_logger
from common.config import Config

logger = setup_logger("view_dates")

# –ù–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
BOOKING_DATA_DIR = Config.BOOKING_DATA_DIR


def get_all_booking_files() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .csv —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ booking/"""
    if not os.path.exists(BOOKING_DATA_DIR):
        return []
    files = [
        f for f in os.listdir(BOOKING_DATA_DIR)
        if f.endswith('.csv') and os.path.isfile(os.path.join(BOOKING_DATA_DIR, f))
    ]
    return sorted(files)


def format_file_name(file_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
    name = file_name.replace('.csv', '').replace('_', ' ').title()
    return name


def get_file_path(file_name: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    return os.path.join(BOOKING_DATA_DIR, file_name)


def load_bookings_from_csv(file_name: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    try:
        file_path = get_file_path(file_name)
        if not os.path.exists(file_path):
            logger.error(f"File not found: {file_path}")
            return None

        df = pd.read_csv(file_path, encoding='utf-8')
        df = df.fillna('')

        required_cols = {'–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥'}
        if not required_cols.issubset(df.columns):
            logger.error(f"Missing required columns in {file_name}. Found: {df.columns.tolist()}")
            return None

        df['–ó–∞–µ–∑–¥'] = pd.to_datetime(df['–ó–∞–µ–∑–¥'], format='%d.%m.%Y', errors='coerce')
        df['–í—ã–µ–∑–¥'] = pd.to_datetime(df['–í—ã–µ–∑–¥'], format='%d.%m.%Y', errors='coerce')
        df = df.dropna(subset=['–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥'])

        return df
    except Exception as e:
        logger.error(f"Error loading CSV file {file_name}: {e}", exc_info=True)
        return None


async def view_dates_handler(update: Update, context):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç –≤ —Ä–∞–∑—Ä–µ–∑–µ CSV —Ñ–∞–π–ª–æ–≤"""
    csv_files = get_all_booking_files()

    if not csv_files:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –ø–∞–ø–∫–µ `booking/`")
        return

    for file_name in csv_files:
        df = load_bookings_from_csv(file_name)

        if df is None:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {file_name}")
            continue

        if df.empty:
            await update.message.reply_text(f"üì≠ –§–∞–π–ª {file_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        booked_periods = []
        for _, row in df.iterrows():
            check_in = row['–ó–∞–µ–∑–¥'].date()
            check_out = row['–í—ã–µ–∑–¥'].date()
            booked_periods.append((check_in, check_out))

        # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        free_periods = find_free_periods(booked_periods)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        display_name = format_file_name(file_name)
        message = f"üìÖ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è {display_name}</b>\n\n"

        if not free_periods:
            message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"
        else:
            message += "üÜì –°–≤–æ–±–æ–¥–Ω–æ:\n"
            for start, end in free_periods:
                nights = (end - start).days
                message += (
                    f"üìÖ –° {start.strftime('%d.%m.%Y')} - –ü–æ {end.strftime('%d.%m.%Y')}\n"
                    f"üåô {nights} –Ω–æ—á–µ–π\n\n"
                )

        await update.message.reply_text(message, parse_mode='HTML')


def find_free_periods(
    booked_periods: List[Tuple[date, date]],
    start_date: date = None,
    end_date: date = None
) -> List[Tuple[date, date]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –º–µ–∂–¥—É –∑–∞–Ω—è—Ç—ã–º–∏ –¥–∞—Ç–∞–º–∏.

    Args:
        booked_periods: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (check_in, check_out)
        start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
        end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +1 –≥–æ–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è)

    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–∞–º–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    """
    if start_date is None:
        start_date = date.today()
    if end_date is None:
        end_date = date.today() + timedelta(days=365)

    if not booked_periods:
        return [(start_date, end_date)]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞
    sorted_periods = sorted(booked_periods, key=lambda x: x[0])

    free_periods = []
    previous_end = start_date

    for current_start, current_end in sorted_periods:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if current_end < start_date:
            if current_end > previous_end:
                previous_end = current_end
            continue

        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –æ–Ω–æ —Ä–∞–Ω—å—à–µ start_date
        actual_start = max(current_start, start_date)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É previous_end –∏ actual_start
        if previous_end < actual_start:
            free_end = actual_start - timedelta(days=1)
            if free_end >= previous_end:
                free_periods.append((previous_end, free_end))

        # –û–±–Ω–æ–≤–ª—è–µ–º previous_end
        if current_end > previous_end:
            previous_end = current_end

        # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã end_date ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
        if previous_end >= end_date:
            break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
    if previous_end < end_date:
        free_periods.append((previous_end, end_date))

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (–Ω–∞—á–∞–ª–æ <= –∫–æ–Ω–µ—Ü)
    free_periods = [(s, e) for s, e in free_periods if s <= e]

    return free_periods