# tg_notifier.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è, —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è)

import asyncio
import os
from typing import Optional, Union, List

import aiohttp
from aiohttp import FormData

from common.config import Config
from common.logging_config import setup_logger

logger = setup_logger("tg_notifier")


async def send_message(
    session: aiohttp.ClientSession,
    chat_id: Union[str, int],
    message: Optional[str] = None,
    media_files: Optional[Union[str, List[str]]] = None,
    timeout_sec: int = 15
) -> bool:
    if not message and not media_files:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∏ message, –Ω–∏ media_files")
        raise ValueError("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ message, –ª–∏–±–æ media_files")

    bot_token = Config.TELEGRAM_BOOKING_BOT_TOKEN
    if not bot_token:
        logger.error("TELEGRAM_BOOKING_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return False

    base_url = f"https://api.telegram.org/bot{bot_token}"
    timeout = aiohttp.ClientTimeout(total=timeout_sec)

    try:
        files_list = [media_files] if isinstance(media_files, str) else (media_files or [])

        if not files_list:
            # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            payload = {
                'chat_id': str(chat_id),
                'text': message,
                'parse_mode': 'HTML'
            }
            async with session.post(f"{base_url}/sendMessage", data=payload, timeout=timeout) as resp:
                if resp.status == 200:
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
                    return True
                else:
                    err = await resp.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ {chat_id}: {resp.status} ‚Äî {err}")
                    return False

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
        for i, file_path in enumerate(files_list):
            if not os.path.isfile(file_path):
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False

            form = FormData()
            form.add_field('chat_id', str(chat_id))
            if i == 0 and message:
                form.add_field('caption', message)
                form.add_field('parse_mode', 'HTML')

            with open(file_path, 'rb') as f:
                form.add_field(
                    'document',
                    f,
                    filename=os.path.basename(file_path),
                    content_type='application/octet-stream'
                )

                logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {file_path} –≤ —á–∞—Ç {chat_id}")
                async with session.post(
                    f"{base_url}/sendDocument",
                    data=form,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as resp:
                    if resp.status == 200:
                        logger.info(f"‚úÖ –§–∞–π–ª {file_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
                    else:
                        err = await resp.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {file_path} –≤ {chat_id}: {resp.status} ‚Äî {err}")
                        return False

        return True

    except asyncio.TimeoutError:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}")
        return False
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –≤ send_message –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return False

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_chat_id = 651627886
    if send_message(test_chat_id, "TEST"):
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")