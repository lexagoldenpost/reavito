from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any
from pathlib import Path
import csv
import aiohttp

from main_tg_bot.sender.tg_notifier import send_message
from common.config import Config
from common.logging_config import setup_logger

logger = setup_logger("notification_service")
TELEGRAM_CHAT_IDS = Config.TELEGRAM_CHAT_NOTIFICATION_ID


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á ---
def load_tasks_from_csv(csv_file: str = "tasks.csv") -> List[Dict[str, Any]]:
    csv_path = Path(__file__).parent.parent / "booking_data" / csv_file
    tasks = []
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            tasks = [row for row in reader]
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∏–∑ {csv_path}")
        for i, task in enumerate(tasks, 1):
            logger.debug(
                f"  [{i}] {task.get('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ')} | –æ–±—ä–µ–∫—Ç={task.get('–¢—Ä–∏–≥–≥–µ—Ä –ø–æ –æ–±—ä–µ–∫—Ç—É')} | "
                f"—Å—Ç–æ–ª–±–µ—Ü={task.get('–¢—Ä–∏–≥–≥–µ—Ä –ø–æ —Å—Ç–æ–ª–±—Ü—É')} | "
                f"—Å–º–µ—â–µ–Ω–∏–µ={task.get('–¢—Ä–∏–≥–µ—Ä —Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö (–º–∏–Ω—É—Å —Å—Ä–æ–∫ –¥–æ, –±–µ–∑ —Å—Ä–æ–∫ –ø–æ—Å–ª–µ)')}"
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ {csv_file}: {e}")
    return tasks


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –æ–±—ä–µ–∫—Ç—É ---
def load_object_data_from_csv(object_name: str) -> List[Dict[str, Any]]:
    filename = object_name.lower().replace(' ', '_') + ".csv"
    csv_path = Path(__file__).parent.parent / "booking_data" / filename
    if not csv_path.exists():
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
        return []

    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            data = list(reader)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}'")
        return data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞ {object_name}: {e}")
        return []


# --- –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã ---
def parse_date(date_str: str) -> Optional[date]:
    if not date_str or date_str.strip() == '':
        return None
    for fmt in ('%d.%m.%Y', '%Y-%m-%d'):
        try:
            return datetime.strptime(date_str.strip(), fmt).date()
        except ValueError:
            continue
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: '{date_str}'")
    return None


# --- –û–±–æ–≥–∞—â–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ ---
def enrich_booking_with_dates(booking: Dict[str, Any]) -> Dict[str, Any]:
    booking['_check_in'] = parse_date(booking.get('–ó–∞–µ–∑–¥', ''))
    booking['_check_out'] = parse_date(booking.get('–í—ã–µ–∑–¥', ''))
    return booking


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è ---
def get_event_date(booking: Dict[str, Any], trigger_column: str) -> Optional[date]:
    if trigger_column == '–ó–∞–µ–∑–¥':
        return booking.get('_check_in')
    elif trigger_column == '–í—ã–µ–∑–¥':
        return booking.get('_check_out')
    return None


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ (—Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ---
def should_trigger_notification(
    notification: Dict[str, Any], booking: Dict[str, Any], today: date
) -> bool:
    guest = booking.get('–ì–æ—Å—Ç—å', 'N/A')
    obj = booking.get('sheet_name', 'N/A')
    notif_name = notification.get('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ', 'N/A')

    # 1. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    trigger_obj = notification.get('–¢—Ä–∏–≥–≥–µ—Ä –ø–æ –æ–±—ä–µ–∫—Ç—É')
    if booking.get('sheet_name') != trigger_obj:
        logger.debug(f"[SKIP] ‚ùå –û–±—ä–µ–∫—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –±—Ä–æ–Ω—å='{obj}', —Ç—Ä–∏–≥–≥–µ—Ä='{trigger_obj}' ‚Üí –≥–æ—Å—Ç—å={guest}")
        return False

    # 2. –í–∞–ª–∏–¥–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
    trigger_col = notification.get('–¢—Ä–∏–≥–≥–µ—Ä –ø–æ —Å—Ç–æ–ª–±—Ü—É')
    if trigger_col not in ('–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥'):
        logger.debug(f"[SKIP] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —Ç—Ä–∏–≥–≥–µ—Ä–∞: '{trigger_col}' ‚Üí {notif_name}")
        return False

    # 3. –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è
    event_date = get_event_date(booking, trigger_col)
    if not event_date:
        logger.debug(f"[SKIP] ‚ùå –ù–µ—Ç –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è ({trigger_col}) –¥–ª—è –±—Ä–æ–Ω–∏ ‚Üí –≥–æ—Å—Ç—å={guest}")
        return False

    # 4. –°–º–µ—â–µ–Ω–∏–µ
    raw_offset = notification.get('–¢—Ä–∏–≥–µ—Ä —Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö (–º–∏–Ω—É—Å —Å—Ä–æ–∫ –¥–æ, –±–µ–∑ —Å—Ä–æ–∫ –ø–æ—Å–ª–µ)', '0')
    try:
        offset_days = int(raw_offset)
    except (ValueError, TypeError):
        logger.debug(f"[SKIP] ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è: '{raw_offset}' ‚Üí {notif_name}")
        return False

    # 5. –†–∞—Å—á—ë—Ç –¥–∞—Ç—ã —Ç—Ä–∏–≥–≥–µ—Ä–∞
    trigger_date = event_date - timedelta(days=offset_days)
    matches = (trigger_date == today)

    logger.debug(
        f"[CHECK] {'‚úÖ MATCH' if matches else '‚ùå NO'} | –≥–æ—Å—Ç—å={guest} | —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ='{notif_name}' | "
        f"—Å–æ–±—ã—Ç–∏–µ={event_date} ({trigger_col}) | —Å–º–µ—â–µ–Ω–∏–µ={offset_days} | "
        f"—Ç—Ä–∏–≥–≥–µ—Ä={trigger_date} | —Å–µ–≥–æ–¥–Ω—è={today}"
    )

    return matches


# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
def format_message_with_booking_data(
    message: str,
    notification_type: str,
    booking: Dict[str, Any],
    current_date: date
) -> str:
    if not message:
        return message

    formatted = message

    # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–µ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    for field, value in booking.items():
        placeholder = f"{{{field}}}"
        if placeholder in formatted:
            if field in ('–ó–∞–µ–∑–¥', '–í—ã–µ–∑–¥'):
                parsed = booking.get(f'_{field.lower()}') or parse_date(value)
                if parsed:
                    if notification_type == '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±–æ—Ä–∫–∏':
                        thai_year = parsed.year + 543
                        formatted_date = parsed.strftime(f'%d.%m.{thai_year}')
                    else:
                        formatted_date = parsed.strftime('%d.%m.%Y')
                    formatted = formatted.replace(placeholder, formatted_date)
            else:
                formatted = formatted.replace(placeholder, str(value) if value else '')

    # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π—Å–∫–æ–≥–æ –≥–æ–¥–∞
    if '{thai_year}' in formatted:
        thai_year = current_date.year + 543
        formatted = formatted.replace('{thai_year}', str(thai_year))

    return formatted


# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ ---
def format_trigger_info(booking: Dict[str, Any], notification: Dict[str, Any], current_date: date) -> str:
    try:
        offset_days = int(notification.get('–¢—Ä–∏–≥–µ—Ä —Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö (–º–∏–Ω—É—Å —Å—Ä–æ–∫ –¥–æ, –±–µ–∑ —Å—Ä–æ–∫ –ø–æ—Å–ª–µ)', 0))
    except (ValueError, TypeError):
        offset_days = 0

    trigger_col = notification.get('–¢—Ä–∏–≥–≥–µ—Ä –ø–æ —Å—Ç–æ–ª–±—Ü—É', '')
    event_type = "–∑–∞–µ–∑–¥–∞" if trigger_col == '–ó–∞–µ–∑–¥' else "–≤—ã–µ–∑–¥–∞"
    direction = "–ø–æ—Å–ª–µ" if offset_days < 0 else "–¥–æ"

    event_date = get_event_date(booking, trigger_col)

    check_in_str = booking['_check_in'].strftime('%d.%m.%Y') if booking.get('_check_in') else '‚Äî'
    check_out_str = booking['_check_out'].strftime('%d.%m.%Y') if booking.get('_check_out') else '‚Äî'

    return (
        "üîî <b>–°—Ä–∞–±–æ—Ç–∞–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b> üîî\n"
        f"üè† <b>–û–±—ä–µ–∫—Ç:</b> {notification.get('–¢—Ä–∏–≥–≥–µ—Ä –ø–æ –æ–±—ä–µ–∫—Ç—É', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë§ <b>–ì–æ—Å—Ç—å:</b> {booking.get('–ì–æ—Å—Ç—å', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ <b>–î–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {check_in_str} ‚Äì {check_out_str}\n"
        f"‚è∞ <b>–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notification.get('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÜ <b>–î–∞—Ç–∞ {event_type}:</b> {event_date.strftime('%d.%m.%Y') if event_date else '‚Äî'}\n"
        f"üìå <b>–¢—Ä–∏–≥–≥–µ—Ä –ø–æ:</b> {event_type}\n"
        f"‚è≥ <b>–î–Ω–µ–π {direction} {event_type}:</b> {abs(offset_days)}\n\n"
        "<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>"
    )


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
async def send_notification(http_session, booking: Dict[str, Any], notification: Dict[str, Any], current_date: date):
    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification['–û–ø–æ–≤–µ—â–µ–Ω–∏–µ']} –¥–ª—è {booking.get('–ì–æ—Å—Ç—å', 'N/A')}")

    trigger_info = format_trigger_info(booking, notification, current_date)
    formatted_message = format_message_with_booking_data(
        notification.get('–°–æ–æ–±—â–µ–Ω–∏–µ', ''),
        notification.get('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ', ''),
        booking,
        current_date
    )

    logger.debug(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{formatted_message}")

    for chat_id in TELEGRAM_CHAT_IDS:
        try:
            await send_message(http_session, chat_id, trigger_info)
            await send_message(http_session, chat_id, formatted_message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")

    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –≥–æ—Å—Ç—è: {booking.get('–ì–æ—Å—Ç—å', 'N/A')}")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def check_notification_triggers():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    today = datetime.now().date()
    logger.info(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {today}")

    notifications = load_tasks_from_csv()
    if not notifications:
        logger.info("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
    objects = {
        n.get('–¢—Ä–∏–≥–≥–µ—Ä –ø–æ –æ–±—ä–µ–∫—Ç—É')
        for n in notifications
        if n.get('–¢—Ä–∏–≥–≥–µ—Ä –ø–æ –æ–±—ä–µ–∫—Ç—É')
    }
    logger.info(f"üè¢ –û–±—ä–µ–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {sorted(objects)}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    all_bookings = []
    for obj in objects:
        raw_bookings = load_object_data_from_csv(obj)
        for b in raw_bookings:
            b['sheet_name'] = obj
            enriched = enrich_booking_with_dates(b)
            all_bookings.append(enriched)
            logger.debug(
                f"üì• –ë—Ä–æ–Ω—å: –≥–æ—Å—Ç—å={enriched.get('–ì–æ—Å—Ç—å')} | –æ–±—ä–µ–∫—Ç={obj} | "
                f"–∑–∞–µ–∑–¥={enriched.get('_check_in')} | –≤—ã–µ–∑–¥={enriched.get('_check_out')}"
            )

    if not all_bookings:
        logger.info("üì≠ –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return

    logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(all_bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ {len(notifications)} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    async with aiohttp.ClientSession() as session:
        for booking in all_bookings:
            for notification in notifications:
                if should_trigger_notification(notification, booking, today):
                    await send_notification(session, booking, notification, today)

    logger.info("üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# --- –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ---
if __name__ == "__main__":
    try:
        import asyncio
        logger.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")
        asyncio.run(check_notification_triggers())
        logger.info("‚úÖ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)