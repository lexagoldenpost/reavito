import sys
import io
import asyncio
from typing import Dict, Set
from sqlalchemy import select
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from telethon import TelegramClient, events
from telethon.tl.types import Message, PeerChat, User, Channel, PeerChannel
from common.config import Config
from common.logging_config import setup_logger
from models import ChannelKeyword, Base

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

logger = setup_logger("channel_monitor")

DATABASE_URL = f"postgresql+asyncpg://{Config.POSTGRES_USER}:{Config.POSTGRES_PASSWORD}@{Config.POSTGRES_HOST}:{Config.POSTGRES_PORT}/{Config.POSTGRES_DB}"
TELEGRAM_SESSION_NAME = Config.TELEGRAM_API_SEND_BOOKING_ID+'_'+Config.TELEGRAM_SESSION_NAME

async_engine = create_async_engine(DATABASE_URL, echo=True)
AsyncSessionLocal = sessionmaker(
    bind=async_engine,
    class_=AsyncSession,
    expire_on_commit=False
)


class ChannelMonitor:
  def __init__(self):
    self.api_id = Config.TELEGRAM_API_SEND_BOOKING_ID
    self.api_hash = Config.TELEGRAM_API_SEND_BOOKING_HASH
    self.phone = Config.TELEGRAM_SEND_BOOKING_PHONE
    self.target_group = Config.TARGET_GROUP

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ {group_name: {keywords}}
    self.group_keywords: Dict[str, Set[str]] = {}

    self.client = TelegramClient(
        TELEGRAM_SESSION_NAME,
        self.api_id,
        self.api_hash,
        system_version='4.16.30-vxCUSTOM'
    )

  async def load_group_keywords(self):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –ë–î"""
    try:
      async with AsyncSessionLocal() as session:
        result = await session.execute(select(ChannelKeyword))
        records = result.scalars().all()

        if not records:
          logger.error("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≥—Ä—É–ø–ø–∞—Ö")
          return False

        self.group_keywords.clear()
        for record in records:
          if not record.channel:
            continue

          group_name = record.channel.strip()
          keywords = {kw.strip().lower()
                      for kw in record.keywords.split(',')
                      if kw.strip()} if record.keywords else set()

          self.group_keywords[group_name] = keywords
          logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: '%s' —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: %s",
                      group_name, keywords)

        return True

    except Exception as e:
      logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %s", str(e), exc_info=True)
      return False

  async def print_active_dialogs(self):
      """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö (–∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö)"""
      try:
        dialogs = await self.client.get_dialogs()
        if not dialogs:
          logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤")
          return

        logger.info("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:")
        for dialog in dialogs:
          if not hasattr(dialog, "entity"):
            continue

          entity = dialog.entity

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏
          if isinstance(entity, User):
            entity_type = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
          elif isinstance(entity, PeerChat):
            entity_type = "–ì—Ä—É–ø–ø–∞"
          elif isinstance(entity, (Channel, PeerChannel)):
            entity_type = "–ö–∞–Ω–∞–ª"
          else:
            entity_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"

          # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
          if getattr(entity, 'left', False):
            status = "–ü–æ–∫–∏–Ω—É—Ç"
          elif getattr(entity, 'kicked', False):
            status = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
          else:
            status = "–ê–∫—Ç–∏–≤–µ–Ω"

          name = getattr(entity, 'title', None) or getattr(entity, 'username',
                                                           None) or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

          logger.info("- %s: '%s' (ID: %d, –¢–∏–ø: %s, –°—Ç–∞—Ç—É—Å: %s)",
                      "–î–∏–∞–ª–æ–≥", name, entity.id, entity_type, status)

      except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤: %s", str(e),
                     exc_info=True)

  async def print_active_groups(self):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö"""
    try:
      dialogs = await self.client.get_dialogs()
      if not dialogs:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤")
        return

      logger.info("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø:")
      for dialog in dialogs:
        if not hasattr(dialog, "entity"):
          continue

        entity = dialog.entity

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
        is_group = False
        if dialog.is_group:
          is_group = True
        elif isinstance(entity, PeerChat):
          is_group = True
        elif hasattr(entity, 'megagroup') and entity.megagroup:
          is_group = True
        elif hasattr(entity, 'broadcast') and not entity.broadcast:
          is_group = True

        if not is_group:
          continue

        status = ""
        if getattr(entity, 'left', False):
          status = " (–ü–æ–∫–∏–Ω—É—Ç–∞)"
        elif getattr(entity, 'kicked', False):
          status = " (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)"

        name = getattr(entity, 'title', "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        logger.info("- –ì—Ä—É–ø–ø–∞: '%s'%s (ID: %d, –¢–∏–ø: %s)",
                    name, status, entity.id, type(entity))

    except Exception as e:
      logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: %s", str(e), exc_info=True)

  async def setup_monitoring(self):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not await self.load_group_keywords():
      return False

    await self.print_active_groups()

    @self.client.on(events.NewMessage())
    async def handler(event):
      try:
        if not event.is_group:
          return
        message = event.message
        if not message or not message.text:
          return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await event.get_chat()
        if not chat:
          logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ")
          return

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.debug("–¢–∏–ø —á–∞—Ç–∞: %s, –ê—Ç—Ä–∏–±—É—Ç—ã: %s", type(chat), dir(chat))

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        group_name = getattr(chat, 'title', None)
        if not group_name:
          logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
          return

        logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã: %s", group_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –ë–î
        if group_name not in self.group_keywords:
          logger.debug("–ì—Ä—É–ø–ø–∞ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î", group_name)
          return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = self.group_keywords[group_name]
        if not keywords:
          logger.debug("–î–ª—è –≥—Ä—É–ø–ø—ã '%s' –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤", group_name)
          return

        text_lower = message.text.lower()
        if any(keyword in text_lower for keyword in keywords):
          logger.info("–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –≥—Ä—É–ø–ø–µ '%s'", group_name)
          await self.forward_to_group(message, group_name)

      except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", str(e), exc_info=True)

    return True

  async def forward_to_group(self, message: Message, group_name: str):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É"""
    try:
      # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
      try:
        target_entity = await self.client.get_entity(self.target_group)
      except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ '%s': %s",
                     self.target_group, str(e))
        return

      # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ
      try:
        chat = await message.get_chat()
        chat_id = chat.id
      except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ: %s", str(e))
        chat_id = 0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID

      # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      message_text = (
        f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –≥—Ä—É–ø–ø–µ {group_name}\n\n"
        f"üìÑ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{message.text}\n\n"
      )

      # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å chat_id
      if chat_id:
        message_text += f"üîó –°—Å—ã–ª–∫–∞: https://t.me/c/{chat_id}/{message.id}"
      else:
        message_text += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await self.client.send_message(
          entity=target_entity,
          message=message_text,
          link_preview=False
      )
      logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã '%s' –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ '%s'",
                  group_name, self.target_group)

    except Exception as e:
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", str(e), exc_info=True)

  async def start(self):
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
      await self.client.start(self.phone)
      logger.info("–ö–ª–∏–µ–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

      if not await self.setup_monitoring():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        return

      await self.client.run_until_disconnected()
    except Exception as e:
      logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: %s", str(e), exc_info=True)
    finally:
      await self.client.disconnect()
      logger.info("–ö–ª–∏–µ–Ω—Ç Telegram –æ—Ç–∫–ª—é—á–µ–Ω")

  def run(self):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
      with self.client:
        self.client.loop.run_until_complete(self.start())
    except Exception as e:
      logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", str(e), exc_info=True)
      raise


if __name__ == "__main__":
  monitor = ChannelMonitor()
  monitor.run()