from datetime import date, datetime
from sqlalchemy import select, and_
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
  CommandHandler,
  CallbackContext,
  CallbackQueryHandler,
  MessageHandler,
  filters,
  ConversationHandler,
  ContextTypes,
)
from common.database import SessionLocal
from common.logging_config import setup_logger
from sync_db_google_sheets.models import Booking

logger = setup_logger("edit_booking")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_SHEET, SELECT_BOOKING, EDIT_BOOKING = range(3)


async def edit_booking_start(update: Update, context: CallbackContext) -> int:
  """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä sheet_name"""
  with SessionLocal() as session:
    sheets = session.execute(
        select(Booking.sheet_name).distinct()
    ).scalars().all()

    if not sheets:
      await update.message.reply_text(
          "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
      return -1

    keyboard = [
      [InlineKeyboardButton(sheet, callback_data=f"sheet_{sheet}")]
      for sheet in sheets
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )

  return SELECT_SHEET


async def select_sheet(update: Update, context: CallbackContext) -> int:
  """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ sheet_name –∏ –ø–æ–∫–∞–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
  query = update
  if hasattr(update, 'callback_query'):
    query = update.callback_query
    await query.answer()

  sheet_name = query.data.replace("sheet_", "")
  context.user_data['edit_booking'] = {'sheet_name': sheet_name}

  with SessionLocal() as session:
    bookings = session.execute(
        select(Booking)
        .where(and_(
            Booking.sheet_name == sheet_name,
            Booking.check_out >= date.today()
        ))
        .order_by(Booking.check_in)
    ).scalars().all()

    if not bookings:
      await query.edit_message_text(
          "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.")
      return -1

    message_lines = []
    for idx, booking in enumerate(bookings, 1):
      nights = (booking.check_out - booking.check_in).days
      message_lines.append(
          f"{idx}. {booking.guest} - {booking.check_in} - {booking.check_out} ({nights} –Ω–æ—á–µ–π)"
      )

    message = f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {sheet_name}:\n\n" + "\n".join(message_lines)
    message += "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

    keyboard = [
      [InlineKeyboardButton(
          f"{idx}. {b.guest}",
          callback_data=f"booking_{b.id}"
      )]
      for idx, b in enumerate(bookings, 1)
    ]
    keyboard.append(
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_sheets")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        message,
        reply_markup=reply_markup
    )

  return SELECT_BOOKING


async def select_booking(update: Update, context: CallbackContext) -> int:
  """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
  query = update.callback_query
  await query.answer()

  if query.data == "back_to_sheets":
    return await edit_booking_start(query, context)

  booking_id = int(query.data.replace("booking_", ""))
  context.user_data['edit_booking']['booking_id'] = booking_id

  with SessionLocal() as session:
    booking = session.get(Booking, booking_id)

    if not booking:
      await query.edit_message_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
      return -1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    original_data = {
      'guest': booking.guest,
      'check_in': booking.check_in,
      'check_out': booking.check_out,
      'phone': booking.phone,
      'comments': booking.comments,
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if hasattr(booking, 'booking_date'):
      original_data['booking_date'] = booking.booking_date
    if hasattr(booking, 'additional_phone'):
      original_data['additional_phone'] = booking.additional_phone

    context.user_data['edit_booking']['original'] = original_data

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message = "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    fields = [
      ("–ì–æ—Å—Ç—å", original_data.get('guest', 'N/A')),
      ("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", original_data.get('check_in', 'N/A')),
      ("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", original_data.get('check_out', 'N/A')),
      ("–¢–µ–ª–µ—Ñ–æ–Ω", original_data.get('phone', 'N/A')),
      ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", original_data.get('comments', 'N/A'))
    ]

    if 'booking_date' in original_data:
      fields.insert(1, ("–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", original_data['booking_date']))
    if 'additional_phone' in original_data:
      fields.append(("–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω", original_data['additional_phone']))

    for field_name, value in fields:
      message += f"<b>{field_name}:</b> {value}\n"

    message += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    message += "<code>–ì–æ—Å—Ç—å;–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–î–î-–ú–ú-–ì–ì–ì–ì);–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–î–î-–ú–ú-–ì–ì–ì–ì);–¢–µ–ª–µ—Ñ–æ–Ω;–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"

    if 'booking_date' in original_data:
      message += ";–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–î–î-–ú–ú-–ì–ì–ì–ì)"
    if 'additional_phone' in original_data:
      message += ";–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω"

    message += "</code>"

    keyboard = [
      [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")],
      [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_bookings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

  return EDIT_BOOKING


async def edit_booking_data(update: Update, context: CallbackContext) -> int:
  """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
  user_data = context.user_data['edit_booking']
  original = user_data['original']

  try:
    parts = update.message.text.split(';')
    required_fields = 5  # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    if 'booking_date' in original:
      required_fields += 1
    if 'additional_phone' in original:
      required_fields += 1

    if len(parts) != required_fields:
      raise ValueError(
          f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è {required_fields} –ø–æ–ª–µ–π.")

    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    guest = parts[0].strip()
    check_in = datetime.strptime(parts[1].strip(), "%d-%m-%Y").date()
    check_out = datetime.strptime(parts[2].strip(), "%d-%m-%Y").date()
    phone = parts[3].strip()
    comments = parts[4].strip()

    if check_in >= check_out:
      await update.message.reply_text(
          "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞!")
      return EDIT_BOOKING

    new_data = {
      'guest': guest,
      'check_in': check_in,
      'check_out': check_out,
      'phone': phone,
      'comments': comments
    }

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    part_index = 5
    if 'booking_date' in original:
      new_data['booking_date'] = datetime.strptime(parts[part_index].strip(),
                                                   "%d-%m-%Y").date()
      part_index += 1
    if 'additional_phone' in original:
      new_data['additional_phone'] = parts[part_index].strip()

    user_data['new_data'] = new_data

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    message = "üîç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
    for key, new_value in new_data.items():
      old_value = original.get(key, '')
      message += f"<b>{key.replace('_', ' ').title()}:</b> {new_value} (–±—ã–ª–æ: {old_value})\n"

    keyboard = [
      [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_booking"),
       InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")],
      [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_bookings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    error_msg = "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–§–æ—Ä–º–∞—Ç: "
    error_msg += "–ì–æ—Å—Ç—å;–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–î–î-–ú–ú-–ì–ì–ì–ì);–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–î–î-–ú–ú-–ì–ì–ì–ì);–¢–µ–ª–µ—Ñ–æ–Ω;–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    if 'booking_date' in original:
      error_msg += ";–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–î–î-–ú–ú-–ì–ì–ì–ì)"
    if 'additional_phone' in original:
      error_msg += ";–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω"

    await update.message.reply_text(error_msg)
    return EDIT_BOOKING

  return EDIT_BOOKING


async def save_booking(update: Update, context: CallbackContext) -> int:
  """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î"""
  query = update.callback_query
  await query.answer()

  user_data = context.user_data['edit_booking']

  with SessionLocal() as session:
    booking = session.get(Booking, user_data['booking_id'])

    if booking:
      new_data = user_data['new_data']
      for key, value in new_data.items():
        setattr(booking, key, value)

      session.commit()
      await query.edit_message_text("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                                    parse_mode="HTML")
    else:
      await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")

  return -1


async def cancel_edit(update: Update, context: CallbackContext) -> int:
  """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
  query = update.callback_query
  await query.answer()

  if query.data == "back_to_bookings":
    return await select_sheet(query, context)

  await query.edit_message_text(
      "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã. –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
  return -1


edit_booking_conv_handler = ConversationHandler(
    entry_points=[CommandHandler('edit_booking', edit_booking_start)],
    states={
        SELECT_SHEET: [CallbackQueryHandler(select_sheet, pattern="^sheet_")],
        SELECT_BOOKING: [
            CallbackQueryHandler(select_booking, pattern="^booking_"),
            CallbackQueryHandler(cancel_edit, pattern="^back_to_sheets")
        ],
        EDIT_BOOKING: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, edit_booking_data),
            CallbackQueryHandler(save_booking, pattern="^save_booking"),
            CallbackQueryHandler(cancel_edit, pattern="^cancel_booking"),
            CallbackQueryHandler(cancel_edit, pattern="^back_to_bookings")
        ]
    },
    fallbacks=[CommandHandler('cancel', cancel_edit)],
    allow_reentry=True
)