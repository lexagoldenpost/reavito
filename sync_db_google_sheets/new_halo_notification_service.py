from collections import defaultdict
from datetime import datetime, timedelta
from typing import List, Optional, Tuple
from pathlib import Path
import asyncio
import argparse

from sqlalchemy import select, and_, or_
from telethon.tl.types import Channel, ChatBannedRights

from common.config import Config
from common.database import SessionLocal
from common.logging_config import setup_logger
from sync_db_google_sheets.models import Booking, Chat
from channel_monitor import ChannelMonitor

logger = setup_logger("new_halo_notification_service")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
IMAGES_FOLDER = Path(Config.IMAGES_FOLDER) if Config.IMAGES_FOLDER else None


async def send_halo_notifications(title: str, dry_run: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç–∞—Ö –≤ –≥—Ä—É–ø–ø—ã Telegram —á–µ—Ä–µ–∑ ChannelMonitor

    Args:
        title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        dry_run (bool): –ï—Å–ª–∏ True - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: {title} (—Ä–µ–∂–∏–º {'dry run' if dry_run else '—Ä–µ–∞–ª—å–Ω—ã–π'})")
    current_date = datetime.now().date()
    future_date = current_date + timedelta(days=60)  # 2 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥

    try:
        with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤ (–≥–¥–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã)
            groups = session.execute(
                select(Chat).where(Chat.chat_name.is_not(None))
            ).scalars().all()

            if not groups:
                logger.info("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            bookings = session.execute(
                select(Booking)
                .where(
                    and_(
                        Booking.sheet_name == title,
                        Booking.check_out >= current_date,
                        or_(
                            Booking.check_in <= future_date,
                            Booking.check_in.is_(None)
                        )
                    )
                )
                .order_by(Booking.check_in)
            ).scalars().all()

            if not bookings:
                logger.info(f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {title}")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
            images = []
            if IMAGES_FOLDER and IMAGES_FOLDER.exists():
                images = list(IMAGES_FOLDER.glob('*.*'))
                images = [img for img in images if
                          img.suffix.lower() in ['.jpg', '.jpeg', '.png']]
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

            # –í —Ä–µ–∂–∏–º–µ dry_run –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
            monitor = None
            if not dry_run:
                monitor = ChannelMonitor()
                await monitor.client.start(monitor.phone)

            for group in groups:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã
                    send_frequency = group.send_frequency if group.send_frequency is not None else 0

                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π
                    free_periods = await log_booking_periods(bookings, current_date, future_date, send_frequency)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç
                    free_dates = []
                    for start, end, nights in free_periods:
                        free_dates.append(f"{start.strftime('%d.%m.%y')}-{end.strftime('%d.%m.%y')} ({nights} –Ω–æ—á–µ–π)")

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã "–∏ –¥–∞–ª–µ–µ"
                    for booking in bookings:
                        if booking.check_in is None and booking.check_out:
                            free_dates.append(f"—Å {booking.check_out.strftime('%d.%m.%y')} –∏ –¥–∞–ª–µ–µ")

                    if not free_dates:
                        logger.info(
                            f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É {group.chat_name} - –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ "
                            f"(–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {send_frequency} –¥–Ω–µ–π)")
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = (
                        f"–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ {title} –≤ 400–º –æ—Ç –ø–ª—è–∂–∞ –ù–∞–π –Ø–Ω–≥\n"
                        "10 –º–∏–Ω—É—Ç –µ–∑–¥—ã –æ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞!\n"
                        "üè° 1BR 36–º2, 3–π —ç—Ç–∞–∂, –≤–∏–¥ –Ω–∞ –±–∞—Å—Å–µ–π–Ω\n\n"
                        "üóùÔ∏è–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫!\n\n"
                        "–°–í–û–ë–û–î–ù–´–ï –î–õ–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –î–ê–¢–´ :\n\n"
                        f"{'\n'.join(free_dates)}\n\n"
                        "‚ö†Ô∏è–ï—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –≤ –õ–°."
                    )

                    if dry_run:
                        # –í —Ä–µ–∂–∏–º–µ dry run —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –±—ã–ª–æ –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        logger.info(f"DRY RUN: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {group.chat_name}:\n{message}")
                        if group.accepts_images and images:
                            logger.info(f"DRY RUN: –ü—Ä–∏–ª–æ–∂–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                        continue

                    # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                    chat_entity = None
                    try:
                        # –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏
                        try:
                            chat_entity = await monitor.client.get_entity(group.chat_name)
                        except ValueError:
                            # –ü–æ–ø—ã—Ç–∫–∞ 2: –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                            async for dialog in monitor.client.iter_dialogs():
                                if dialog.name and dialog.name.lower() == group.chat_name.lower() or str(
                                        dialog.id) == group.chat_name:
                                    chat_entity = dialog.entity
                                    break

                            if not chat_entity:
                                logger.error(f"–ì—Ä—É–ø–ø–∞ '{group.chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö")
                                continue

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
                        if await is_user_banned(monitor.client, chat_entity.id):
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {group.chat_name}")
                            continue

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group.chat_name}: {str(e)}")
                        continue

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ChannelMonitor
                    try:
                        if group.accepts_images and images:
                            await monitor.client.send_message(
                                chat_entity,
                                message,
                                file=images
                            )
                            logger.info(
                                f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group.chat_name}")
                        else:
                            await monitor.client.send_message(chat_entity, message)
                            logger.info(
                                f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group.chat_name}")
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group.chat_name}: {str(e)}")

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–æ–π {group.chat_name}: {str(e)}")
                    continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}", exc_info=True)
    finally:
        if monitor and not dry_run:
            await monitor.client.disconnect()


async def log_booking_periods(bookings: List[Booking], start_date: datetime.date, end_date: datetime.date, min_nights: int = 0) -> List[Tuple[datetime.date, datetime.date, int]]:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç—ã—Ö –∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö —Å —É—á–µ—Ç–æ–º –Ω–æ—á–µ–≤–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ —Å min_nights –∏ –±–æ–ª–µ–µ"""
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞
    sorted_bookings = sorted(
        [b for b in bookings if b.check_in is not None],
        key=lambda x: x.check_in
    )

    # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É check_in –ø–æ—Å–ª–µ end_date (–µ—Å–ª–∏ –µ—Å—Ç—å)
    min_check_in_after_period = None
    for booking in sorted_bookings:
        if booking.check_in and booking.check_in > end_date:
            if min_check_in_after_period is None or booking.check_in < min_check_in_after_period:
                min_check_in_after_period = booking.check_in

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
    if min_check_in_after_period is not None:
        sorted_bookings.append(Booking(check_in=min_check_in_after_period, check_out=None))
    else:
        sorted_bookings.append(Booking(check_in=end_date + timedelta(days=1), check_out=None))

    prev_check_out = start_date
    periods = []
    free_periods = []

    for booking in sorted_bookings:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–∏–º check_out –∏ —Ç–µ–∫—É—â–∏–º check_in
        if booking.check_in and prev_check_out < booking.check_in:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–≤–æ–∫ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ + 1 –Ω–æ—á—å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö, —Ç–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ
            free_nights = (booking.check_in - prev_check_out).days + 1
            if free_nights > 0:
                period_info = {
                    'type': 'free',
                    'start': prev_check_out - timedelta(days=1) if prev_check_out != datetime.now().date() else prev_check_out,
                    'end': booking.check_in,
                    'nights': free_nights
                }
                periods.append(period_info)
                if free_nights >= min_nights:
                    free_periods.append((period_info['start'], period_info['end'], period_info['nights']))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–π –ø–µ—Ä–∏–æ–¥
        if booking.check_in and booking.check_out:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–≤–æ–∫ = (check_out - check_in).days
            busy_nights = (booking.check_out - booking.check_in).days
            period_info = {
                'type': 'busy',
                'start': booking.check_in,
                'end': booking.check_out,
                'nights': busy_nights
            }
            periods.append(period_info)
            prev_check_out = booking.check_out + timedelta(days=1)
        elif booking.check_in:  # –î–ª—è –∑–∞–ø–∏—Å–µ–π –±–µ–∑ check_out
            prev_check_out = booking.check_in

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    months = defaultdict(list)
    for period in periods:
        month_key = period['start'].strftime('%Y-%m')
        months[month_key].append(period)

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–µ—Å—è—Ü–∞–º
    for month, month_periods in sorted(months.items()):
        logger.info(f"\n–ú–µ—Å—è—Ü: {month}")
        for period in month_periods:
            if period['type'] == 'free':
                logger.info(
                    f"  –°–í–û–ë–û–î–ù–û: {period['start'].strftime('%d.%m')}-{period['end'].strftime('%d.%m')} "
                    f"({period['nights']} –Ω–æ—á–µ–π)")
            else:
                logger.info(
                    f"  –ó–ê–ù–Ø–¢–û:  {period['start'].strftime('%d.%m')}-{period['end'].strftime('%d.%m')} "
                    f"({period['nights']} –Ω–æ—á–µ–π)")

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–∞—Ö "–∏ –¥–∞–ª–µ–µ"
    for booking in bookings:
        if booking.check_in is None and booking.check_out:
            logger.info(
                f"\n–°–í–û–ë–û–î–ù–û –°: {booking.check_out.strftime('%d.%m.%Y')} –∏ –¥–∞–ª–µ–µ")

    return free_periods

def format_free_dates_with_frequency(bookings: List[Booking], current_date,
                                     future_date, min_days: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç, –∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–∏–æ–¥—ã –∫–æ—Ä–æ—á–µ min_days"""
    date_ranges = []
    prev_check_out = None
    current_range_start = None

    for booking in sorted(bookings,
                          key=lambda x: x.check_in or datetime.max.date()):
        if booking.check_in is None and booking.check_out:
            if current_range_start:
                duration = (prev_check_out - current_range_start).days + 1
                if duration >= min_days:
                    date_ranges.append(
                        format_date_range(current_range_start, prev_check_out))
                current_range_start = None

            date_ranges.append(f"—Å {booking.check_out.strftime('%d.%m.%y')} –∏ –¥–∞–ª–µ–µ")
            continue

        if not booking.check_in:
            continue

        if booking.check_in > future_date:
            continue

        if prev_check_out and booking.check_in > prev_check_out + timedelta(days=1):
            if current_range_start:
                duration = (prev_check_out - current_range_start).days + 1
                if duration >= min_days:
                    date_ranges.append(
                        format_date_range(current_range_start, prev_check_out))
            current_range_start = booking.check_in
        elif not current_range_start:
            current_range_start = booking.check_in

        prev_check_out = booking.check_out if booking.check_out else booking.check_in

    if current_range_start and prev_check_out:
        duration = (prev_check_out - current_range_start).days + 1
        if duration >= min_days:
            date_ranges.append(format_date_range(current_range_start, prev_check_out))

    return "\n".join(date_ranges) if date_ranges else ""


def format_date_range(start_date, end_date) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Å—Ç—Ä–æ–∫—É"""
    return f"{start_date.strftime('%d.%m.%y')}-{end_date.strftime('%d.%m.%y')}"


async def is_user_banned(client, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ"""
    try:
        chat = await client.get_entity(chat_id)
        if isinstance(chat, Channel):
            participant = await client.get_permissions(chat, 'me')
            if hasattr(participant, 'banned_rights') and participant.banned_rights:
                if isinstance(participant.banned_rights, ChatBannedRights):
                    return participant.banned_rights.view_messages
            elif hasattr(participant, 'kicked'):
                return participant.kicked
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
        return False


async def send_to_specific_chat(
    chat_id: str,
    title: str,
    dry_run: bool = False,
    images: Optional[List[Path]] = None
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç/–≥—Ä—É–ø–ø—É –ø–æ ID

    Args:
        chat_id (int): ID —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã –≤ Telegram
        title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        dry_run (bool): –ï—Å–ª–∏ True - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        images (Optional[List[Path]]): –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    logger.info(
        f"–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç {chat_id} –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: {title} "
        f"(—Ä–µ–∂–∏–º {'dry run' if dry_run else '—Ä–µ–∞–ª—å–Ω—ã–π'})")

    current_date = datetime.now().date()
    future_date = current_date + timedelta(days=60)  # 2 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥

    try:
        with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            bookings = session.execute(
                select(Booking)
                .where(
                    and_(
                        Booking.sheet_name == title,
                        Booking.check_out >= current_date,
                        or_(
                            Booking.check_in <= future_date,
                            Booking.check_in.is_(None)
                        )
                    )
                )
                .order_by(Booking.check_in)
            ).scalars().all()

            if not bookings:
                logger.info(f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {title}")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
            if images is None and IMAGES_FOLDER and IMAGES_FOLDER.exists():
                images = list(IMAGES_FOLDER.glob('*.*'))
                images = [img for img in images if
                          img.suffix.lower() in ['.jpg', '.jpeg', '.png']]
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 0 –¥–Ω–µ–π)
            free_periods = await log_booking_periods(bookings, current_date,
                                                     future_date, 0)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç
            free_dates = []
            for start, end, nights in free_periods:
                free_dates.append(
                    f"{start.strftime('%d.%m.%y')}-{end.strftime('%d.%m.%y')} ({nights} –Ω–æ—á–µ–π)")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã "–∏ –¥–∞–ª–µ–µ"
            for booking in bookings:
                if booking.check_in is None and booking.check_out:
                    free_dates.append(
                        f"—Å {booking.check_out.strftime('%d.%m.%y')} –∏ –¥–∞–ª–µ–µ")

            if not free_dates:
                logger.info(f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {title}")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ {title} –≤ 400–º –æ—Ç –ø–ª—è–∂–∞ –ù–∞–π –Ø–Ω–≥\n"
                "10 –º–∏–Ω—É—Ç –µ–∑–¥—ã –æ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞!\n"
                "üè° 1BR 36–º2, 3–π —ç—Ç–∞–∂, –≤–∏–¥ –Ω–∞ –±–∞—Å—Å–µ–π–Ω\n\n"
                "üóùÔ∏è–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫!\n\n"
                "–°–í–û–ë–û–î–ù–´–ï –î–õ–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –î–ê–¢–´ :\n\n"
                f"{'\n'.join(free_dates)}\n\n"
                "‚ö†Ô∏è–ï—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –≤ –õ–°."
            )

            if dry_run:
                # –í —Ä–µ–∂–∏–º–µ dry run —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –±—ã–ª–æ –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                logger.info(
                    f"DRY RUN: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}:\n{message}")
                if images:
                    logger.info(f"DRY RUN: –ü—Ä–∏–ª–æ–∂–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                return

            # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            monitor = ChannelMonitor()
            try:
                await monitor.client.start(monitor.phone)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
                if await is_user_banned(monitor.client, chat_id):
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ {chat_id}")
                    return

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    if images:
                        await monitor.client.send_message(
                            chat_id,
                            message,
                            file=images
                        )
                        logger.info(
                            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    else:
                        await monitor.client.send_message(chat_id, message)
                        logger.info(
                            f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")

            finally:
                await monitor.client.disconnect()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}",
                     exc_info=True)

async def main():
    parser = argparse.ArgumentParser(description='–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç–∞—Ö')
    parser.add_argument('title', type=str, help='–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--dry-run', action='store_true', help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏')
    args = parser.parse_args()

    await send_halo_notifications(args.title, args.dry_run)


if __name__ == "__main__":
    asyncio.run(main())

# –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
#await send_to_specific_chat(123456789, "HALO Title")

# –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
#await send_to_specific_chat(123456789, "HALO Title", dry_run=True)
 # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
#
# –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä dry_run –≤ —Ñ—É–Ω–∫—Ü–∏—é send_halo_notifications
#
# –í —Ä–µ–∂–∏–º–µ dry run:
#
# –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç Telegram
#
# –ù–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
#
# –õ–æ–≥–∏—Ä—É–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
#
# –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ argparse:
#
# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç title - –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
#
# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ --dry-run –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
#
# –¢–µ–ø–µ—Ä—å —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:
#
# –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:
#
# bash
# python script.py "HALO Title"
# –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏):
#
# bash
# python script.py "HALO Title" --dry-run
# –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–π–¥–µ—Ç —á–∞—Ç—ã –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.