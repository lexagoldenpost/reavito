from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
  CommandHandler,
  CallbackQueryHandler,
  MessageHandler,
  filters,
  ConversationHandler,
  ContextTypes,
)

from common.config import Config
from common.logging_config import setup_logger
from google_sheets_handler import GoogleSheetsHandler

logger = setup_logger("add_booking")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    SELECT_SHEET,
    GUEST_NAME,
    BOOKING_DATE,
    CHECK_IN,
    CHECK_OUT,
    NIGHTS,
    MONTHLY_SUM,
    TOTAL_SUM,
    ADVANCE,
    ADDITIONAL_PAYMENT,
    SOURCE,
    EXTRA_CHARGES,
    EXPENSES,
    PAYMENT_METHOD,
    COMMENT,
    PHONE,
    EXTRA_PHONE,
    FLIGHTS,
    CONFIRM,
) = range(19)


class AddBookingHandler:
    def __init__(self, bot):
        self.bot = bot
        self.active_sessions = set()
        self.sheets_handler = GoogleSheetsHandler(Config.SAMPLE_SPREADSHEET_ID)
        self.SHEETS = {
            "HALO Title": "HALO Title",
            "Citygate –†311": "Citygate –†311",
            "Citygate B209": "Citygate B209",
            "Palmetto Karon": "Palmetto Karon",
            "Title Residence": "Title Residence",
        }

    def get_conversation_handler(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler"""
        return ConversationHandler(
            entry_points=[CommandHandler("add_booking", self.start_add_booking)],
            states={
                SELECT_SHEET: [CallbackQueryHandler(self.select_sheet)],
                GUEST_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.guest_name)
                ],
                BOOKING_DATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.booking_date)
                ],
                CHECK_IN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.check_in)
                ],
                CHECK_OUT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.check_out)
                ],
                NIGHTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.nights),
                    CallbackQueryHandler(self.skip_nights, pattern="^skip_nights$"),
                ],
                MONTHLY_SUM: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.monthly_sum),
                    CallbackQueryHandler(
                        self.skip_monthly_sum, pattern="^skip_monthly_sum$"
                    ),
                ],
                TOTAL_SUM: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.total_sum)
                ],
                ADVANCE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.advance)
                ],
                ADDITIONAL_PAYMENT: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, self.additional_payment
                    ),
                    CallbackQueryHandler(
                        self.skip_additional_payment,
                        pattern="^skip_additional_payment$",
                    ),
                ],
                SOURCE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.source)
                ],
                EXTRA_CHARGES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.extra_charges),
                    CallbackQueryHandler(
                        self.skip_extra_charges, pattern="^skip_extra_charges$"
                    ),
                ],
                EXPENSES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.expenses),
                    CallbackQueryHandler(self.skip_expenses, pattern="^skip_expenses$"),
                ],
                PAYMENT_METHOD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.payment_method)
                ],
                COMMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.comment),
                    CallbackQueryHandler(self.skip_comment, pattern="^skip_comment$"),
                ],
                PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.phone)
                ],
                EXTRA_PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.extra_phone),
                    CallbackQueryHandler(
                        self.skip_extra_phone, pattern="^skip_extra_phone$"
                    ),
                ],
                FLIGHTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.flights),
                    CallbackQueryHandler(self.skip_flights, pattern="^skip_flights$"),
                ],
                CONFIRM: [CallbackQueryHandler(self.confirm_booking)],
            },
            fallbacks=[CommandHandler("cancel", self.handle_cancel)],
            conversation_timeout=300,  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        )

    async def cleanup_session(self, user_id: int,
        context: ContextTypes.DEFAULT_TYPE):
      """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
      if user_id in self.active_sessions:
        self.active_sessions.remove(user_id)
      if context.user_data:
        context.user_data.clear()
      logger.info(f"Cleaned up session for user {user_id}")

    async def handle_timeout(self, update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
      """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ —Å–µ—Å—Å–∏–∏"""
      user = update.effective_user
      await self.cleanup_session(user.id, context)
      await context.bot.send_message(
          chat_id=user.id,
          text="‚è≥ –°–µ—Å—Å–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
               "–î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_booking"
      )

    async def start_add_booking(self, update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
      """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
      try:
        user = update.effective_user
        logger.info(f"User {user.username} started add_booking")

        if not await self.bot.check_user_permission(update):
          return ConversationHandler.END

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if user.id in self.active_sessions:
          # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å
          keyboard = [
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ",
                                  callback_data="force_new")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="exit_command")],
          ]
          reply_markup = InlineKeyboardMarkup(keyboard)

          await update.message.reply_text(
              "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
              "–•–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –µ—ë –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?",
              reply_markup=reply_markup
          )
          return SELECT_SHEET

        # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è
        self.active_sessions.add(user.id)
        context.user_data.clear()
        context.user_data["booking_date"] = datetime.now().strftime("%Y-%m-%d")

        keyboard = [
          [InlineKeyboardButton(name, callback_data=name)]
          for name in self.SHEETS.values()
        ]
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        keyboard.append(
            [InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥", callback_data="exit_command")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return SELECT_SHEET

      except Exception as e:
        logger.error(f"Error in start_add_booking: {e}", exc_info=True)
        await update.message.reply_text(
          "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    async def select_sheet(self, update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
      """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥ —Å–±—Ä–æ—Å–∞"""
      try:
        query = update.callback_query
        await query.answer()

        user = update.effective_user

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π
        if query.data == "exit_command":
          return await self.handle_exit(update, context)
        elif query.data == "force_new":
          await self.cleanup_session(user.id, context)
          await query.edit_message_text(
            "‚ôªÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
          return await self.start_add_booking(update, context)

        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        selected_sheet = query.data
        context.user_data["sheet"] = selected_sheet

        await query.edit_message_text(
            text=f"üìå –í—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {selected_sheet}\n\n" "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–æ—Å—Ç—è:"
        )
        return GUEST_NAME

      except Exception as e:
        logger.error(f"Error in select_sheet: {e}", exc_info=True)
        await self.cleanup_session(update.effective_user.id, context)
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã")
        return ConversationHandler.END

    async def handle_exit(self, update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
      """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞"""
      query = update.callback_query
      await query.answer()

      user = update.effective_user
      await self.cleanup_session(user.id, context)

      await query.edit_message_text(
          "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
          "–î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_booking"
      )
      return ConversationHandler.END

    async def guest_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –≥–æ—Å—Ç—è"""
        try:
            guest_name = update.message.text.strip()
            if not guest_name:
                await update.message.reply_text(
                    "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                )
                return GUEST_NAME

            context.user_data["guest"] = guest_name
            await update.message.reply_text(
                f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {datetime.now().strftime('%d.%m.%Y')}):"
            )
            return BOOKING_DATE

        except Exception as e:
            logger.error(f"Error in guest_name: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏")
            return ConversationHandler.END

    async def booking_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            date_str = update.message.text.strip()
            if not date_str:
                date_str = datetime.now().strftime("%d.%m.%Y")

            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            formatted_date = date.strftime("%Y-%m-%d")
            context.user_data["booking_date"] = formatted_date

            await update.message.reply_text("üè® –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
            return CHECK_IN

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
            return BOOKING_DATE
        except Exception as e:
            logger.error(f"Error in booking_date: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã")
            return ConversationHandler.END

    async def check_in(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞"""
        try:
            date_str = update.message.text.strip()
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            formatted_date = date.strftime("%Y-%m-%d")
            context.user_data["check_in"] = formatted_date

            await update.message.reply_text("üö™ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
            return CHECK_OUT

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
            return CHECK_IN
        except Exception as e:
            logger.error(f"Error in check_in: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞")
            return ConversationHandler.END

    async def check_out(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π"""
        try:
            date_str = update.message.text.strip()
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            formatted_date = date.strftime("%Y-%m-%d")
            context.user_data["check_out"] = formatted_date

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π
            check_in_str = context.user_data.get("check_in")
            if check_in_str:
                check_in_date = datetime.strptime(
                    check_in_str, "%Y-%m-%d"
                ).date()
                nights = (date - check_in_date).days
                context.user_data["nights"] = str(nights)
                await update.message.reply_text(f"üåô –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π: {nights}")

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_monthly_sum"
                        )
                    ]
                ]
            )

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –º–µ—Å—è—Ü–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–∫—Ç 15000 –ù–æ—è 20000'):",
                reply_markup=reply_markup,
            )
            return MONTHLY_SUM

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
            return CHECK_OUT
        except Exception as e:
            logger.error(f"Error in check_out: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞")
            return ConversationHandler.END

    async def nights(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π"""
        try:
            nights = update.message.text.strip()
            if not nights.isdigit():
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–æ—á–µ–π:")
                return NIGHTS

            context.user_data["nights"] = nights

            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_monthly_sum"
                        )
                    ]
                ]
            )

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –º–µ—Å—è—Ü–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–∫—Ç 15000 –ù–æ—è 20000'):",
                reply_markup=reply_markup,
            )
            return MONTHLY_SUM

        except Exception as e:
            logger.error(f"Error in nights: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π")
            return ConversationHandler.END

    async def skip_nights(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üåô –ü—Ä–æ–ø—É—â–µ–Ω–æ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π")

        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_monthly_sum"
                    )
                ]
            ]
        )

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –º–µ—Å—è—Ü–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–∫—Ç 15000 –ù–æ—è 20000'):",
            reply_markup=reply_markup,
        )
        return MONTHLY_SUM

    async def monthly_sum(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ –º–µ—Å—è—Ü–∞–º"""
        try:
            monthly_sum = update.message.text.strip()
            context.user_data["monthly_sum"] = monthly_sum

            await update.message.reply_text("üíµ –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
            return TOTAL_SUM

        except Exception as e:
            logger.error(f"Error in monthly_sum: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã –ø–æ –º–µ—Å—è—Ü–∞–º")
            return ConversationHandler.END

    async def skip_monthly_sum(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ –º–µ—Å—è—Ü–∞–º"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üí∞ –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Å—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="üíµ –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        return TOTAL_SUM

    async def total_sum(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π —Å—É–º–º—ã"""
        try:
            total_sum = update.message.text.strip()
            context.user_data["total_sum"] = total_sum

            await update.message.reply_text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞–≤–∞–Ω—Å–∞ (–≤ –±–∞—Ç—Ç–∞—Ö/—Ä—É–±–ª—è—Ö):")
            return ADVANCE

        except Exception as e:
            logger.error(f"Error in total_sum: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–µ–π —Å—É–º–º—ã")
            return ConversationHandler.END

    async def advance(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞–Ω—Å–∞"""
        try:
            advance = update.message.text.strip()
            context.user_data["advance"] = advance

            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_additional_payment"
                        )
                    ]
                ]
            )

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üí¥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):",
                reply_markup=reply_markup,
            )
            return ADDITIONAL_PAYMENT

        except Exception as e:
            logger.error(f"Error in advance: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞–Ω—Å–∞")
            return ConversationHandler.END

    async def additional_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–ª–∞—Ç—ã"""
        try:
            additional_payment = update.message.text.strip()
            context.user_data["additional_payment"] = additional_payment

            await update.message.reply_text(
                "üìå –í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ê–≤–∏—Ç–æ, Booking –∏ —Ç.–¥.):"
            )
            return SOURCE

        except Exception as e:
            logger.error(f"Error in additional_payment: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–ª–∞—Ç—ã")
            return ConversationHandler.END

    async def skip_additional_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –¥–æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üí¥ –ü—Ä–æ–ø—É—â–µ–Ω–æ: –¥–æ–ø–ª–∞—Ç–∞")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üìå –í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ê–≤–∏—Ç–æ, Booking –∏ —Ç.–¥.):",
        )
        return SOURCE

    async def source(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            source = update.message.text.strip()
            context.user_data["source"] = source

            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_extra_charges"
                        )
                    ]
                ]
            )

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üí∏ –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):",
                reply_markup=reply_markup,
            )
            return EXTRA_CHARGES

        except Exception as e:
            logger.error(f"Error in source: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
            return ConversationHandler.END

    async def extra_charges(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            extra_charges = update.message.text.strip()
            context.user_data["extra_charges"] = extra_charges

            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_expenses"
                        )
                    ]
                ]
            )

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üßπ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã (—É–±–æ—Ä–∫–∞ –∏ —Ç.–¥.):",
                reply_markup=reply_markup,
            )
            return EXPENSES

        except Exception as e:
            logger.error(f"Error in extra_charges: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø. –ø–ª–∞—Ç–µ–∂–µ–π")
            return ConversationHandler.END

    async def skip_extra_charges(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üí∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")

        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_expenses"
                    )
                ]
            ]
        )

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üßπ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã (—É–±–æ—Ä–∫–∞ –∏ —Ç.–¥.):",
            reply_markup=reply_markup,
        )
        return EXPENSES

    async def expenses(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            expenses = update.message.text.strip()
            context.user_data["expenses"] = expenses

            await update.message.reply_text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
            return PAYMENT_METHOD

        except Exception as e:
            logger.error(f"Error in expenses: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
            return ConversationHandler.END

    async def skip_expenses(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üßπ –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Ä–∞—Å—Ö–æ–¥—ã")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="üí≥ –í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        )
        return PAYMENT_METHOD

    async def payment_method(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            payment_method = update.message.text.strip()
            context.user_data["payment_method"] = payment_method

            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment"
                        )
                    ]
                ]
            )

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):",
                reply_markup=reply_markup,
            )
            return COMMENT

        except Exception as e:
            logger.error(f"Error in payment_method: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã")
            return ConversationHandler.END

    async def comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            comment = update.message.text.strip()
            context.user_data["comment"] = comment

            await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
            return PHONE

        except Exception as e:
            logger.error(f"Error in comment: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            return ConversationHandler.END

    async def skip_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üìù –ü—Ä–æ–ø—É—â–µ–Ω–æ: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:"
        )
        return PHONE

    async def phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            phone = update.message.text.strip()
            context.user_data["phone"] = phone

            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_extra_phone"
                        )
                    ]
                ]
            )

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üì± –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å):",
                reply_markup=reply_markup,
            )
            return EXTRA_PHONE

        except Exception as e:
            logger.error(f"Error in phone: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return ConversationHandler.END

    async def extra_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            extra_phone = update.message.text.strip()
            context.user_data["extra_phone"] = extra_phone

            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_flights"
                        )
                    ]
                ]
            )

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å):",
                reply_markup=reply_markup,
            )
            return FLIGHTS

        except Exception as e:
            logger.error(f"Error in extra_phone: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return ConversationHandler.END

    async def skip_extra_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üì± –ü—Ä–æ–ø—É—â–µ–Ω–æ: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")

        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_flights"
                    )
                ]
            ]
        )

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å):",
            reply_markup=reply_markup,
        )
        return FLIGHTS

    async def flights(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–∞—Ö"""
        try:
            if update.callback_query and update.callback_query.data == "skip_flights":
                query = update.callback_query
                await query.answer()
                context.user_data["flights"] = ""
                await query.edit_message_text("‚úàÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–∞—Ö")
            else:
                flights = update.message.text.strip()
                context.user_data["flights"] = flights

            summary = self._generate_summary(context.user_data)

            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n{summary}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
                reply_markup=reply_markup,
            )
            return CONFIRM

        except Exception as e:
            logger.error(f"Error in flights: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–∞—Ö")
            return ConversationHandler.END

    async def skip_flights(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–∞—Ö"""
        return await self.flights(update, context)

    async def confirm_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—ã—Ö–æ–¥–∞"""
        query = update.callback_query
        await query.answer()
        user_id = update.effective_user.id

        if query.data == "cancel" or query.data == "exit_command":
            return await self.handle_exit(update, context)

        try:
            sheet_key = context.user_data.get("sheet")
            if not sheet_key:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
                )
                return ConversationHandler.END

            sheet_name = self.SHEETS.get(sheet_key)
            if not sheet_name:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
                )
                return ConversationHandler.END

            success = await self.sheets_handler.save_booking(sheet_name, context.user_data)

            if success:
                self.active_sessions.discard(user_id)
                context.user_data.clear()
                await query.edit_message_text(
                    f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –≤ –ª–∏—Å—Ç–µ '{sheet_name}'!\n"
                    "–î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_booking"
                )
            else:
                await query.edit_message_text(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ª–∏—Å—Ç '{sheet_name}'\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )

            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error confirming booking: {e}", exc_info=True)
            self.active_sessions.discard(user_id)
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return ConversationHandler.END

    async def handle_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–µ—Å—Å–∏–∏"""
        user = update.effective_user
        await self.cleanup_session(user.id, context)

        await update.message.reply_text(
            "‚ùå –¢–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_booking"
        )
        return ConversationHandler.END

    def _generate_summary(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return (
            f"–¢–∞–±–ª–∏—Ü–∞: {data.get('sheet', 'N/A')}\n"
            f"–ì–æ—Å—Ç—å: {data.get('guest', 'N/A')}\n"
            f"–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data.get('booking_date', 'N/A')}\n"
            f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {data.get('check_in', 'N/A')}\n"
            f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {data.get('check_out', 'N/A')}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π: {data.get('nights', 'N/A')}\n"
            f"–°—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º: {data.get('monthly_sum', 'N/A')}\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞: {data.get('total_sum', 'N/A')}\n"
            f"–ê–≤–∞–Ω—Å: {data.get('advance', 'N/A')}\n"
            f"–î–æ–ø–ª–∞—Ç–∞: {data.get('additional_payment', 'N/A')}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data.get('source', 'N/A')}\n"
            f"–î–æ–ø. –ø–ª–∞—Ç–µ–∂–∏: {data.get('extra_charges', 'N/A')}\n"
            f"–†–∞—Å—Ö–æ–¥—ã: {data.get('expenses', 'N/A')}\n"
            f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data.get('payment_method', 'N/A')}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', 'N/A')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', 'N/A')}\n"
            f"–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω: {data.get('extra_phone', 'N/A')}\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–∞—Ö: {data.get('flights', 'N/A')}"
        )