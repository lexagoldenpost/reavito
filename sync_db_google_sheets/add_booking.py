# add_booking.py
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from common.logging_config import setup_logger
from common.config import Config

logger = setup_logger("add_booking")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    SELECT_SHEET,
    GUEST_NAME,
    BOOKING_DATE,
    CHECK_IN,
    CHECK_OUT,
    NIGHTS,
    MONTHLY_SUM,
    TOTAL_SUM,
    ADVANCE,
    ADDITIONAL_PAYMENT,
    SOURCE,
    EXTRA_CHARGES,
    EXPENSES,
    PAYMENT_METHOD,
    COMMENT,
    PHONE,
    EXTRA_PHONE,
    FLIGHTS,
    CONFIRM,
) = range(19)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
SHEETS = {
    "HALO Title": "HALO Title",
    "Citygate –†311": "Citygate –†311",
    "Citygate B209": "Citygate B209",
    "Palmetto Karon": "Palmetto Karon",
    "Title Residence": "Title Residence",
}


class AddBookingHandler:
    def __init__(self, bot):
        self.bot = bot
        self.active_sessions = set()
        self.google_sheet_key = Config.SAMPLE_SPREADSHEET_ID
        self.credentials_json = Config.SERVICE_ACCOUNT_FILE
        logger.info("AddBookingHandler initialized")

    def get_conversation_handler(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler"""
        return ConversationHandler(
            entry_points=[CommandHandler("add_booking", self.start_add_booking)],
            states={
                SELECT_SHEET: [CallbackQueryHandler(self.select_sheet)],
                GUEST_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.guest_name)],
                BOOKING_DATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.booking_date)],
                CHECK_IN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.check_in)],
                CHECK_OUT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.check_out)],
                NIGHTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.nights)],
                MONTHLY_SUM: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.monthly_sum)],
                TOTAL_SUM: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.total_sum)],
                ADVANCE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.advance)],
                ADDITIONAL_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND,
                                                  self.additional_payment)],
                SOURCE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.source)],
                EXTRA_CHARGES: [MessageHandler(filters.TEXT & ~filters.COMMAND,
                                             self.extra_charges)],
                EXPENSES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.expenses)],
                PAYMENT_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND,
                                              self.payment_method)],
                COMMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.comment)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.phone)],
                EXTRA_PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.extra_phone)],
                FLIGHTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.flights)],
                CONFIRM: [CallbackQueryHandler(self.save_data)],
            },
            fallbacks=[CommandHandler("cancel", self.handle_cancel)],
            per_message=True,
            per_chat=True,
            per_user=True
        )

    async def start_add_booking(self, update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            user = update.effective_user
            logger.info(f"User {user.username} started add_booking")

            if not await self.bot.check_user_permission(update):
                return ConversationHandler.END

            if user.id in self.active_sessions:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return ConversationHandler.END

            self.active_sessions.add(user.id)
            logger.debug(f"Active sessions: {self.active_sessions}")

            keyboard = [
                [InlineKeyboardButton(name, callback_data=name)]
                for name in SHEETS.values()
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return SELECT_SHEET

        except Exception as e:
            logger.error(f"Error in start_add_booking: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    async def select_sheet(self, update: Update,
                         context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            query = update.callback_query
            await query.answer()

            selected_sheet = query.data
            context.user_data["sheet"] = selected_sheet
            logger.info(f"Selected sheet: {selected_sheet}")

            await query.edit_message_text(
                text=f"üìå –í—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {selected_sheet}\n\n"
                     "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–æ—Å—Ç—è:"
            )
            return GUEST_NAME

        except Exception as e:
            logger.error(f"Error in select_sheet: {e}", exc_info=True)
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã")
            return ConversationHandler.END

    async def guest_name(self, update: Update,
                       context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –≥–æ—Å—Ç—è"""
        try:
            guest_name = update.message.text.strip()
            if not guest_name:
                await update.message.reply_text(
                    "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return GUEST_NAME

            context.user_data["guest"] = guest_name
            logger.info(f"Guest name set: {guest_name}")

            await update.message.reply_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
            return BOOKING_DATE

        except Exception as e:
            logger.error(f"Error in guest_name: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏")
            return ConversationHandler.END

    async def booking_date(self, update: Update,
                         context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            date_str = update.message.text.strip()
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            formatted_date = date.strftime("%Y-%m-%d 00:00:00")
            context.user_data["booking_date"] = formatted_date
            logger.info(f"Booking date set: {formatted_date}")

            await update.message.reply_text("üè® –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
            return CHECK_IN

        except ValueError:
            logger.warning(f"Invalid date format: {update.message.text}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return BOOKING_DATE
        except Exception as e:
            logger.error(f"Error in booking_date: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã")
            return ConversationHandler.END

    async def check_in(self, update: Update,
                     context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞"""
        try:
            date_str = update.message.text.strip()
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            formatted_date = date.strftime("%Y-%m-%d 00:00:00")
            context.user_data["check_in"] = formatted_date
            logger.info(f"Check-in date set: {formatted_date}")

            await update.message.reply_text("üö™ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
            return CHECK_OUT

        except ValueError:
            logger.warning(f"Invalid date format: {update.message.text}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return CHECK_IN
        except Exception as e:
            logger.error(f"Error in check_in: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞")
            return ConversationHandler.END

    async def check_out(self, update: Update,
                      context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞"""
        try:
            date_str = update.message.text.strip()
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            formatted_date = date.strftime("%Y-%m-%d 00:00:00")
            context.user_data["check_out"] = formatted_date
            logger.info(f"Check-out date set: {formatted_date}")

            await update.message.reply_text("üåô –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π:")
            return NIGHTS

        except ValueError:
            logger.warning(f"Invalid date format: {update.message.text}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return CHECK_OUT
        except Exception as e:
            logger.error(f"Error in check_out: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞")
            return ConversationHandler.END

    async def nights(self, update: Update,
                   context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π"""
        try:
            nights = update.message.text.strip()
            if not nights:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π:")
                return NIGHTS

            context.user_data["nights"] = nights
            logger.info(f"Nights set: {nights}")

            await update.message.reply_text(
                "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –º–µ—Å—è—Ü–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–∫—Ç 15000 –ù–æ—è 20000'):")
            return MONTHLY_SUM

        except Exception as e:
            logger.error(f"Error in nights: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π")
            return ConversationHandler.END

    async def monthly_sum(self, update: Update,
                        context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ –º–µ—Å—è—Ü–∞–º"""
        try:
            monthly_sum = update.message.text.strip()
            if not monthly_sum:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –º–µ—Å—è—Ü–∞–º:")
                return MONTHLY_SUM

            context.user_data["monthly_sum"] = monthly_sum
            logger.info(f"Monthly sum set: {monthly_sum}")

            await update.message.reply_text("üíµ –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
            return TOTAL_SUM

        except Exception as e:
            logger.error(f"Error in monthly_sum: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã –ø–æ –º–µ—Å—è—Ü–∞–º")
            return ConversationHandler.END

    async def total_sum(self, update: Update,
                      context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π —Å—É–º–º—ã"""
        try:
            total_sum = update.message.text.strip()
            if not total_sum:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É:")
                return TOTAL_SUM

            context.user_data["total_sum"] = total_sum
            logger.info(f"Total sum set: {total_sum}")

            await update.message.reply_text(
                "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞–≤–∞–Ω—Å–∞ (–≤ –±–∞—Ç—Ç–∞—Ö/—Ä—É–±–ª—è—Ö):")
            return ADVANCE

        except Exception as e:
            logger.error(f"Error in total_sum: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–µ–π —Å—É–º–º—ã")
            return ConversationHandler.END

    async def advance(self, update: Update,
                    context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞–Ω—Å–∞"""
        try:
            advance = update.message.text.strip()
            if not advance:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞–≤–∞–Ω—Å–∞:")
                return ADVANCE

            context.user_data["advance"] = advance
            logger.info(f"Advance set: {advance}")

            await update.message.reply_text("üí¥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):")
            return ADDITIONAL_PAYMENT

        except Exception as e:
            logger.error(f"Error in advance: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞–Ω—Å–∞")
            return ConversationHandler.END

    async def additional_payment(self, update: Update,
                               context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–ª–∞—Ç—ã"""
        try:
            additional_payment = update.message.text.strip()
            context.user_data["additional_payment"] = additional_payment
            logger.info(f"Additional payment set: {additional_payment}")

            await update.message.reply_text(
                "üìå –í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ê–≤–∏—Ç–æ, Booking –∏ —Ç.–¥.):")
            return SOURCE

        except Exception as e:
            logger.error(f"Error in additional_payment: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–ª–∞—Ç—ã")
            return ConversationHandler.END

    async def source(self, update: Update,
                    context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            source = update.message.text.strip()
            if not source:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
                return SOURCE

            context.user_data["source"] = source
            logger.info(f"Source set: {source}")

            await update.message.reply_text(
                "üí∏ –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):")
            return EXTRA_CHARGES

        except Exception as e:
            logger.error(f"Error in source: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
            return ConversationHandler.END

    async def extra_charges(self, update: Update,
                          context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            extra_charges = update.message.text.strip()
            context.user_data["extra_charges"] = extra_charges
            logger.info(f"Extra charges set: {extra_charges}")

            await update.message.reply_text("üßπ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã (—É–±–æ—Ä–∫–∞ –∏ —Ç.–¥.):")
            return EXPENSES

        except Exception as e:
            logger.error(f"Error in extra_charges: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø. –ø–ª–∞—Ç–µ–∂–µ–π")
            return ConversationHandler.END

    async def expenses(self, update: Update,
                     context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            expenses = update.message.text.strip()
            context.user_data["expenses"] = expenses
            logger.info(f"Expenses set: {expenses}")

            await update.message.reply_text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
            return PAYMENT_METHOD

        except Exception as e:
            logger.error(f"Error in expenses: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
            return ConversationHandler.END

    async def payment_method(self, update: Update,
                           context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            payment_method = update.message.text.strip()
            if not payment_method:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
                return PAYMENT_METHOD

            context.user_data["payment_method"] = payment_method
            logger.info(f"Payment method set: {payment_method}")

            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):")
            return COMMENT

        except Exception as e:
            logger.error(f"Error in payment_method: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã")
            return ConversationHandler.END

    async def comment(self, update: Update,
                    context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            comment = update.message.text.strip()
            context.user_data["comment"] = comment
            logger.info(f"Comment set: {comment}")

            await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
            return PHONE

        except Exception as e:
            logger.error(f"Error in comment: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            return ConversationHandler.END

    async def phone(self, update: Update,
                  context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            phone = update.message.text.strip()
            if not phone:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
                return PHONE

            context.user_data["phone"] = phone
            logger.info(f"Phone set: {phone}")

            await update.message.reply_text(
                "üì± –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å):")
            return EXTRA_PHONE

        except Exception as e:
            logger.error(f"Error in phone: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return ConversationHandler.END

    async def extra_phone(self, update: Update,
                        context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            extra_phone = update.message.text.strip()
            context.user_data["extra_phone"] = extra_phone
            logger.info(f"Extra phone set: {extra_phone}")

            await update.message.reply_text(
                "‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å):")
            return FLIGHTS

        except Exception as e:
            logger.error(f"Error in extra_phone: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return ConversationHandler.END

    async def flights(self, update: Update,
                    context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–∞—Ö"""
        try:
            flights = update.message.text.strip()
            context.user_data["flights"] = flights
            logger.info(f"Flights info set: {flights}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö
            summary = self._generate_summary(context.user_data)
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n{summary}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
                reply_markup=reply_markup
            )
            return CONFIRM

        except Exception as e:
            logger.error(f"Error in flights: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–∞—Ö")
            return ConversationHandler.END

    async def save_data(self, update: Update,
                      context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
        query = update.callback_query
        await query.answer()
        user_id = update.effective_user.id

        if query.data == "cancel":
            self.active_sessions.discard(user_id)
            context.user_data.clear()
            await query.edit_message_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return ConversationHandler.END

        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
            scope = [
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive",
            ]
            creds = ServiceAccountCredentials.from_json_keyfile_dict(
                self.credentials_json, scope
            )
            client = gspread.authorize(creds)
            sheet = client.open_by_key(self.google_sheet_key).worksheet(
                context.user_data["sheet"])

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            row_data = [
                context.user_data.get("guest", ""),
                context.user_data.get("booking_date", ""),
                context.user_data.get("check_in", ""),
                context.user_data.get("check_out", ""),
                context.user_data.get("nights", ""),
                context.user_data.get("monthly_sum", ""),
                context.user_data.get("total_sum", ""),
                context.user_data.get("advance", ""),
                context.user_data.get("additional_payment", ""),
                context.user_data.get("source", ""),
                context.user_data.get("extra_charges", ""),
                context.user_data.get("expenses", ""),
                context.user_data.get("payment_method", ""),
                context.user_data.get("comment", ""),
                context.user_data.get("phone", ""),
                context.user_data.get("extra_phone", ""),
                context.user_data.get("flights", ""),
            ]

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            sheet.append_row(row_data)
            logger.info("Data successfully saved to Google Sheets")

            # –û—á–∏—Å—Ç–∫–∞
            self.active_sessions.discard(user_id)
            context.user_data.clear()

            await query.edit_message_text(
                "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
                "–î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_booking"
            )
            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error saving data: {e}", exc_info=True)
            self.active_sessions.discard(user_id)
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

    async def handle_cancel(self, update: Update,
                          context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã"""
        user_id = update.effective_user.id
        self.active_sessions.discard(user_id)
        context.user_data.clear()
        logger.info(f"Booking canceled by user {user_id}")

        await update.message.reply_text(
            "‚ùå –¢–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_booking"
        )
        return ConversationHandler.END

    def _generate_summary(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return (
            f"–¢–∞–±–ª–∏—Ü–∞: {data.get('sheet', '')}\n"
            f"–ì–æ—Å—Ç—å: {data.get('guest', '')}\n"
            f"–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data.get('booking_date', '')}\n"
            f"–ó–∞–µ–∑–¥: {data.get('check_in', '')}\n"
            f"–í—ã–µ–∑–¥: {data.get('check_out', '')}\n"
            f"–ù–æ—á–µ–π: {data.get('nights', '')}\n"
            f"–°—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º: {data.get('monthly_sum', '')}\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞: {data.get('total_sum', '')}\n"
            f"–ê–≤–∞–Ω—Å: {data.get('advance', '')}\n"
            f"–î–æ–ø–ª–∞—Ç–∞: {data.get('additional_payment', '')}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source', '')}\n"
            f"–î–æ–ø. –ø–ª–∞—Ç–µ–∂–∏: {data.get('extra_charges', '')}\n"
            f"–†–∞—Å—Ö–æ–¥—ã: {data.get('expenses', '')}\n"
            f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data.get('payment_method', '')}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '')}\n"
            f"–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω: {data.get('extra_phone', '')}\n"
            f"–†–µ–π—Å—ã: {data.get('flights', '')}"
        )

