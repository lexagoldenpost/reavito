from datetime import datetime, timedelta
from typing import List, Optional
from pathlib import Path
import asyncio

from sqlalchemy import select, and_, or_
from telethon.sync import TelegramClient
from telethon.tl.types import Channel, ChatBannedRights

from common.config import Config
from common.database import SessionLocal
from common.logging_config import setup_logger
from sync_db_google_sheets.models import Booking, Chat

logger = setup_logger("halo_notification_service")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_API_ID = Config.TELEGRAM_API_SEARCH_ID
TELEGRAM_API_HASH = Config.TELEGRAM_API_SEARCH_HASH
TELEGRAM_SESSION_NAME = 'channel_monitor_session' #Config.TELEGRAM_SEARCH_PHONE+"_"+Config.TELEGRAM_SESSION_NAME
IMAGES_FOLDER = Path(Config.IMAGES_FOLDER) if Config.IMAGES_FOLDER else None


async def send_halo_notifications(title: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç–∞—Ö –≤ –≥—Ä—É–ø–ø—ã Telegram –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—é"""
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: {title}")
    current_date = datetime.now().date()
    future_date = current_date + timedelta(days=60)  # 2 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥

    try:
        with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤ (–≥–¥–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã)
            groups = session.execute(
                select(Chat).where(Chat.chat_name.is_not(None))
            ).scalars().all()

            if not groups:
                logger.info("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            bookings = session.execute(
                select(Booking).where(
                    and_(
                        Booking.sheet_name == title,
                        Booking.check_out >= current_date,
                        or_(
                            Booking.check_in <= future_date,
                            Booking.check_in.is_(None)
                        )
                    )
                ).order_by(Booking.check_in)
            ).scalars().all()

            if not bookings:
                logger.info(f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {title}")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç
            free_dates = format_free_dates(bookings, current_date, future_date)
            if not free_dates:
                logger.info(f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–ª—è {title}")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ {title} –≤ 400–º –æ—Ç –ø–ª—è–∂–∞ –ù–∞–π –Ø–Ω–≥\n"
                "10 –º–∏–Ω—É—Ç –µ–∑–¥—ã –æ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞!\n"
                "üè° 1BR 36–º2, 3–π —ç—Ç–∞–∂, –≤–∏–¥ –Ω–∞ –±–∞—Å—Å–µ–π–Ω\n\n"
                "üóùÔ∏è–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫!\n\n"
                "–°–í–û–ë–û–î–ù–´–ï –î–õ–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –î–ê–¢–´ :\n\n"
                f"{free_dates}\n\n"
                "‚ö†Ô∏è–ï—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –≤ –õ–°."
            )

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
            images = []
            if IMAGES_FOLDER and IMAGES_FOLDER.exists():
                images = list(IMAGES_FOLDER.glob('*.*'))
                images = [img for img in images if img.suffix.lower() in ['.jpg', '.jpeg', '.png']]
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            async with TelegramClient(TELEGRAM_SESSION_NAME, TELEGRAM_API_ID,
                                      TELEGRAM_API_HASH) as client:
                for group in groups:
                    try:
                        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏
                        try:
                            chat_entity = await client.get_entity(
                                group.chat_name)
                        except ValueError:
                            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                            found = False
                            async for dialog in client.iter_dialogs():
                                if dialog.name == group.chat_name:
                                    chat_entity = dialog.entity
                                    found = True
                                    break

                            if not found:
                                raise ValueError(
                                    f"–ì—Ä—É–ø–ø–∞ '{group.chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö")

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
                        if await is_user_banned(client, chat_entity.id):
                            logger.info(
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {group.chat_name}")
                            continue

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if group.accepts_images and images:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                            await client.send_message(
                                chat_entity,
                                message,
                                file=images
                            )
                            logger.info(
                                f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group.chat_name}")
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await client.send_message(chat_entity, message)
                            logger.info(
                                f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group.chat_name}")

                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–æ–π {group.chat_name}: {str(e)}")
                        continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}", exc_info=True)


async def is_user_banned(client: TelegramClient, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ"""
    try:
        chat = await client.get_entity(chat_id)
        if isinstance(chat, Channel):
            participant = await client.get_permissions(chat, 'me')
            banned_rights = participant.banned_rights
            if banned_rights and isinstance(banned_rights, ChatBannedRights):
                return banned_rights.view_messages
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
        return False


def format_free_dates(bookings: List[Booking], current_date, future_date) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    date_ranges = []
    prev_check_out = None
    current_range_start = None

    for booking in sorted(bookings, key=lambda x: x.check_in or datetime.max.date()):
        # –ï—Å–ª–∏ check_in None, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–∞—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–∞ –Ω–∞—á–∏–Ω–∞—è —Å check_out
        if booking.check_in is None and booking.check_out:
            if current_range_start:
                date_ranges.append(format_date_range(current_range_start, prev_check_out))
                current_range_start = None
            date_ranges.append(f"—Å {booking.check_out.strftime('%d.%m.%y')} –∏ –¥–∞–ª–µ–µ")
            continue

        if not booking.check_in:
            continue

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π check_in –≤ –±—É–¥—É—â–µ–º (–ø–æ—Å–ª–µ future_date), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if booking.check_in > future_date:
            continue

        # –ï—Å–ª–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–∏–º check_out –∏ —Ç–µ–∫—É—â–∏–º check_in –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
        if prev_check_out and booking.check_in > prev_check_out + timedelta(days=1):
            if current_range_start:
                date_ranges.append(format_date_range(current_range_start, prev_check_out))
            current_range_start = booking.check_in
        elif not current_range_start:
            current_range_start = booking.check_in

        prev_check_out = booking.check_out if booking.check_out else booking.check_in

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if current_range_start and prev_check_out:
        date_ranges.append(format_date_range(current_range_start, prev_check_out))

    return "\n".join(date_ranges) if date_ranges else ""


def format_date_range(start_date, end_date) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Å—Ç—Ä–æ–∫—É"""
    return f"{start_date.strftime('%d.%m.%y')}-{end_date.strftime('%d.%m.%y')}"


async def main():
    await send_halo_notifications("HALO Title")


if __name__ == "__main__":
    asyncio.run(main())