from datetime import datetime, timedelta, time as dt_time
from typing import Optional

import aiohttp  # –ó–∞–º–µ–Ω—è–µ–º requests –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π aiohttp
from sqlalchemy import select, and_

from common.config import Config
from common.database import SessionLocal
from common.logging_config import setup_logger
from sync_db_google_sheets.models import Booking, Notification

logger = setup_logger("notification_service")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = Config.TELEGRAM_BOOKING_BOT_TOKEN
TELEGRAM_CHAT_IDS = Config.TELEGRAM_CHAT_NOTIFICATION_ID


async def check_notification_triggers():
  """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
  logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
  current_datetime = datetime.now()
  current_date = current_datetime.date()

  try:
    with SessionLocal() as session:
      # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      notifications = session.execute(
          select(Notification)
      ).scalars().all()

      if not notifications:
        logger.info("–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

      # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
      trigger_objects = list({n.trigger_object for n in notifications})

      # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π trigger_days –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
      max_trigger_days = max(n.trigger_days for n in notifications)
      min_trigger_days = min(n.trigger_days for n in notifications)

      # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      date_start = current_date + timedelta(days=min_trigger_days)
      date_end = current_date + timedelta(days=max_trigger_days)

      # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
      bookings = session.execute(
          select(Booking).where(
              and_(
                  Booking.sheet_name.in_(trigger_objects),
                  Booking.check_out >= date_start,
                  Booking.check_in <= date_end
              )
          )
      ).scalars().all()

      if not bookings:
        logger.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return

      # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      async with aiohttp.ClientSession() as http_session:
        for booking in bookings:
          for notification in notifications:
            if booking.sheet_name != notification.trigger_object:
              continue

            if not is_time_in_window(notification.start_time, current_datetime):
              continue

            booking_date, date_type = get_booking_date(booking, notification)
            if not booking_date:
              continue

            if is_trigger_day(booking_date, current_date,
                              notification.trigger_days):
              await send_notification(http_session, booking, notification,
                                      booking_date, date_type)

  except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {str(e)}", exc_info=True)

def is_time_in_window(target_time: Optional[dt_time], current_time: datetime, window_minutes: int = 29) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –æ–∫–Ω–∞"""
    if target_time is None:
        return True
    target_datetime = datetime.combine(current_time.date(), target_time)
    window = timedelta(minutes=window_minutes)
    return target_datetime - window <= current_time <= target_datetime + window

def get_booking_date(booking: Booking, notification: Notification) -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –∏ —Ç–∏–ø –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    if notification.trigger_column == '–ó–∞–µ–∑–¥':
        return booking.check_in, "–∑–∞–µ–∑–¥–∞"
    elif notification.trigger_column == '–í—ã–µ–∑–¥':
        return booking.check_out, "–≤—ã–µ–∑–¥–∞"
    return None, ""


def is_trigger_day(booking_date, current_date, trigger_days) -> bool:
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–Ω–µ–π –¥–æ/–ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞–∫–∞ trigger_days"""
  delta = (booking_date - current_date).days

  if trigger_days > 0:
    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –¥–∞—Ç—ã (–æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π)
    return 0 <= delta <= trigger_days
  elif trigger_days < 0:
    # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ –¥–∞—Ç—ã (–¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è)
    return trigger_days <= delta <= 0
  else:
    # –ù—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç
    return delta == 0


async def send_notification(http_session, booking: Booking,
    notification: Notification, booking_date, date_type: str):
  """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
  trigger_info = format_notification_message(booking, notification,
                                             booking_date, date_type)
  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è {field_name} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ booking
  formatted_message = format_message_with_booking_data(notification.message,
                                                       booking)
  await send_telegram_message(http_session, trigger_info)
  await send_telegram_message(http_session, formatted_message)
  logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ID: {booking.id}")


def format_message_with_booking_data(message: str, booking: Booking) -> str:
  """–ó–∞–º–µ–Ω—è–µ—Ç {field_name} –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Booking"""
  if not message:
    return message

  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ Booking
  booking_fields = vars(booking)

  # –ò—â–µ–º –≤—Å–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ {field_name} –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
  formatted_message = message
  for field in booking_fields:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    placeholder = f"{{{field}}}"
    if placeholder in formatted_message:
      # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ booking
      field_value = getattr(booking, field, "")
      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      if isinstance(field_value, datetime):
        field_value = field_value.strftime('%d.%m.%Y')
      elif field_value is None:
        field_value = ""
      # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
      formatted_message = formatted_message.replace(placeholder,
                                                    str(field_value))

  return formatted_message

async def send_telegram_message(http_session, message: str):
  """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ Telegram —á–∞—Ç–æ–≤"""
  if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_IDS:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_IDS")
    return

  for chat_id in TELEGRAM_CHAT_IDS:
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chat_id {chat_id}")
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
      'chat_id': chat_id,
      'text': message,
      'parse_mode': 'HTML'
    }

    try:
      async with http_session.post(url, json=payload) as response:
        if response.status == 200:
          logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        else:
          error = await response.json()
          logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {error}")
    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {str(e)}")

def format_notification_message(booking: Booking, notification: Notification, booking_date, date_type: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    trigger_type = "–¥–æ" if notification.trigger_days < 0 else "–ø–æ—Å–ª–µ"
    return (
        "üîî <b>–°—Ä–∞–±–æ—Ç–∞–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b> üîî\n"
        f"üè† <b>–û–±—ä–µ–∫—Ç:</b> {notification.trigger_object}\n"
        f"üë§ <b>–ì–æ—Å—Ç—å:</b> {booking.guest or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ <b>–î–∞—Ç—ã:</b> {booking.check_in.strftime('%d.%m.%Y') if booking.check_in else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} - "
        f"{booking.check_out.strftime('%d.%m.%Y') if booking.check_out else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"‚è∞ <b>–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notification.notification_type}\n"
        f"üìÜ <b>–¢—Ä–∏–≥–≥–µ—Ä –¥–∞—Ç–∞ {date_type}:</b> {booking_date.strftime('%d.%m.%Y')}\n"
        f"üìå <b>–¢—Ä–∏–≥–≥–µ—Ä –ø–æ:</b> {date_type}\n"
        f"‚è≥ <b>–î–Ω–µ–π {trigger_type} {date_type}:</b> {notification.trigger_days}\n"
        f"üïí <b>–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notification.start_time.strftime('%H:%M') if notification.start_time else '–õ—é–±–æ–µ'}\n"
        f"üìã <b>ID –±—Ä–æ–Ω–∏:</b> {booking.id}\n\n"
        "<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>"
    )


# if __name__ == "__main__":
#     # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤
#     try:
#         check_notification_triggers()
#         logger.info("Manual check_notification_triggers call succeeded")
#     except Exception as e:
#         logger.error(f"Manual check failed: {e}")

