# view_dates.py
from datetime import date, timedelta
from typing import List, Tuple

from common.database import SessionLocal
from sqlalchemy import select
from telegram import Update

from common.logging_config import setup_logger
from sync_db_google_sheets.models import Booking

logger = setup_logger("view_dates")


async def view_dates_handler(update: Update, context):
  """–í—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç –≤ —Ä–∞–∑—Ä–µ–∑–µ sheet_name"""
  with SessionLocal() as session:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ sheet_name
    sheet_names = session.execute(
        select(Booking.sheet_name).distinct()
    ).scalars().all()

    if not sheet_names:
      await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö.")
      return

    for sheet in sheet_names:
      # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ sheet_name, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞
      bookings = session.execute(
          select(Booking)
          .where(Booking.sheet_name == sheet)
          .order_by(Booking.check_in)
      ).scalars().all()

      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
      booked_periods = [(b.check_in, b.check_out) for b in bookings if
                        b.check_in and b.check_out]

      # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
      free_periods = find_free_periods(booked_periods)

      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      message = f"üìÖ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è {sheet}</b>\n\n"

      if not free_periods:
        message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"
      else:
        message += "üÜì –°–≤–æ–±–æ–¥–Ω–æ:\n"
        for start, end in free_periods:
          nights = (end - start).days
          message += (
            f"üìÖ –° {start.strftime('%d.%m.%Y')} - –ü–æ {end.strftime('%d.%m.%Y')}\n"
            f"üåô {nights} –Ω–æ—á–µ–π\n\n"
          )

      await update.message.reply_text(message, parse_mode='HTML')


def find_free_periods(booked_periods: List[Tuple[date, date]],
    start_date: date = date.today(),
    end_date: date = date.today() + timedelta(days=365)) -> List[
  Tuple[date, date]]:
  """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –º–µ–∂–¥—É –∑–∞–Ω—è—Ç—ã–º–∏ –¥–∞—Ç–∞–º–∏.

    Args:
        booked_periods: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (check_in, check_out)
        start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
        end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +1 –≥–æ–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è)

    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–∞–º–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    """
  if not booked_periods:
    return [(start_date, end_date)]

  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞
  sorted_periods = sorted(booked_periods, key=lambda x: x[0])

  free_periods = []
  previous_end = start_date

  for period in sorted_periods:
    current_start, current_end = period

    # –ï—Å–ª–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏ —Ç–µ–∫—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
    if previous_end < current_start:
      free_periods.append((previous_end, current_start - timedelta(days=1)))

    # –û–±–Ω–æ–≤–ª—è–µ–º previous_end –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
    if current_end > previous_end:
      previous_end = current_end

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if previous_end < end_date:
    free_periods.append((previous_end, end_date))

  return free_periods