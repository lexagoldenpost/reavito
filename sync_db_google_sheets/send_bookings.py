# send_bookings.py
from datetime import datetime
from sqlalchemy import select, or_, and_, func, case
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from common.database import SessionLocal
from common.logging_config import setup_logger
from sync_db_google_sheets.models import Chat
from new_halo_notification_service import send_to_specific_chat

logger = setup_logger("send_bookings")


async def send_bookings_handler(update, context):
  """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
  try:
    if update.callback_query:
      return await handle_callback(update, context)
    elif update.message:
      return await handle_message(update, context)
    else:
      logger.error("Unknown update type in send_bookings_handler")

  except Exception as e:
    logger.error(f"Error in send_bookings_handler: {e}")
    error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
    await send_reply(update, error_message)


async def handle_message(update, context):
  """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
  if 'step' not in context.user_data:
    await show_available_chats(update, context)
    context.user_data['step'] = 1


async def handle_callback(update, context):
  """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
  query = update.callback_query
  await query.answer()

  if query.data.startswith('send_to_'):
    chat_id = int(query.data.split('_')[2])
    await send_notification_to_chat(update, context, chat_id)
  elif query.data == 'refresh_chats':
    await show_available_chats(update, context)

  try:
    await query.message.delete()
  except Exception as e:
    logger.warning(f"Could not delete message: {e}")


async def show_available_chats(update, context):
  """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —á–∞—Ç—ã"""
  try:
    with SessionLocal() as session:
      current_date = datetime.now()

      # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
      days_since_last_send = case(
          (Chat.last_send == None, 9999),
          else_=func.extract('day', current_date - Chat.last_send)
      )

      stmt = select(Chat).where(
          or_(
              Chat.last_send == None,
              and_(
                  Chat.send_frequency != None,
                  days_since_last_send > Chat.send_frequency
              )
          )
      ).order_by(Chat.chat_name)

      result = session.execute(stmt)
      available_chats = result.scalars().all()

      if not available_chats:
        await send_reply(update,
                         "–ù–µ—Ç —á–∞—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç \n–í—ã—Ö–æ–¥ /exit")
        return

      keyboard = []
      for chat in available_chats:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º channel_name –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ chat_name
        display_name = chat.channel_name if chat.channel_name else chat.chat_name
        chat_info = f"{display_name}"

        if chat.chat_object:
          chat_info += f" ({chat.chat_object})"

        if chat.last_send:
          last_send_str = chat.last_send.strftime("%d.%m.%Y")
          days_passed = (current_date - chat.last_send).days
          chat_info += f"\n–ü–æ—Å–ª–µ–¥–Ω—è—è: {last_send_str} ({days_passed} –¥–Ω. –Ω–∞–∑–∞–¥)"
        else:
          chat_info += "\n–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å"

        if chat.send_frequency:
          chat_info += f" | –ß–∞—Å—Ç–æ—Ç–∞: {chat.send_frequency} –¥–Ω."

        button = InlineKeyboardButton(
            text=chat_info,
            callback_data=f"send_to_{chat.id}"
        )
        keyboard.append([button])

      keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                                            callback_data="refresh_chats")])

      reply_markup = InlineKeyboardMarkup(keyboard)
      await send_reply(
          update,
          "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
          reply_markup=reply_markup
      )

  except Exception as e:
    logger.error(f"Error in show_available_chats: {e}")
    await send_reply(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ \n–í—ã—Ö–æ–¥ /exit")

async def send_notification_to_chat(update, context, chat_id):
  """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç"""
  try:
    with SessionLocal() as session:
      # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
      chat = session.get(Chat, chat_id)
      if not chat:
        await send_reply(update, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö \n–í—ã—Ö–æ–¥ /exit")
        return

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ (channel_name –∏–ª–∏ chat_name)
      display_name = chat.channel_name if chat.channel_name else chat.chat_name

      # –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º chat_name)
      success = await send_to_specific_chat(chat.id, chat.chat_name, "HALO Title", dry_run=True)

      if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        chat.last_send = datetime.now()
        session.commit()

        await send_reply(
            update,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {display_name}\n"
            f"–û–±—ä–µ–∫—Ç: {chat.chat_object or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"ID: {chat.id}"
        )
      else:
        await send_reply(
            update,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {display_name} \n–í—ã—Ö–æ–¥ /exit"
        )

  except Exception as e:
    logger.error(f"Error in send_notification_to_chat: {e}")
    await send_reply(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ \n–í—ã—Ö–æ–¥ /exit")

async def send_reply(update, text, reply_markup=None, parse_mode=None):
  """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
  if update.callback_query:
    await update.callback_query.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode=parse_mode
    )
  elif update.message:
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode=parse_mode
    )